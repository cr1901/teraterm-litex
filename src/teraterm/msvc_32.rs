/* automatically generated by rust-bindgen 0.71.1 */

#![allow(unused, non_upper_case_globals, non_snake_case, non_camel_case_types)]
use windows::Win32::Foundation::HWND;
use windows::Win32::System::IO::OVERLAPPED;
use windows::Win32::UI::WindowsAndMessaging::HMENU;
pub type LPOVERLAPPED = *mut OVERLAPPED;

pub const MAXPATHLEN: u32 = 256;
pub const IdBreakTimer: u32 = 1;
pub const IdDelayTimer: u32 = 2;
pub const IdProtoTimer: u32 = 3;
pub const IdDblClkTimer: u32 = 4;
pub const IdScrollTimer: u32 = 5;
pub const IdComEndTimer: u32 = 6;
pub const IdCaretTimer: u32 = 7;
pub const IdPrnStartTimer: u32 = 8;
pub const IdPrnProcTimer: u32 = 9;
pub const IdCancelConnectTimer: u32 = 10;
pub const IdPasteDelayTimer: u32 = 11;
pub const IdVT: u32 = 1;
pub const IdTEK: u32 = 2;
pub const IdBack: u32 = 0;
pub const IdRed: u32 = 1;
pub const IdGreen: u32 = 2;
pub const IdYellow: u32 = 3;
pub const IdBlue: u32 = 4;
pub const IdMagenta: u32 = 5;
pub const IdCyan: u32 = 6;
pub const IdFore: u32 = 7;
pub const WM_USER_ACCELCOMMAND: u32 = 1025;
pub const WM_USER_CHANGEMENU: u32 = 1026;
pub const WM_USER_CLOSEIME: u32 = 1027;
pub const WM_USER_COMMNOTIFY: u32 = 1028;
pub const WM_USER_COMMOPEN: u32 = 1029;
pub const WM_USER_COMMSTART: u32 = 1030;
pub const WM_USER_DLGHELP2: u32 = 1031;
pub const WM_USER_GETHOST: u32 = 1032;
pub const WM_USER_PROTOCANCEL: u32 = 1034;
pub const WM_USER_CHANGETBAR: u32 = 1035;
pub const WM_USER_KEYCODE: u32 = 1036;
pub const WM_USER_GETSERIALNO: u32 = 1037;
pub const WM_USER_CHANGETITLE: u32 = 1038;
pub const WM_USER_NOTIFYICON: u32 = 1039;
pub const WM_USER_DROPNOTIFY: u32 = 1040;
pub const WM_USER_DDEREADY: u32 = 1045;
pub const WM_USER_DDECMNDEND: u32 = 1046;
pub const WM_USER_DDECOMREADY: u32 = 1047;
pub const WM_USER_DDEEND: u32 = 1048;
pub const WM_USER_MACROBRINGUP: u32 = 1049;
pub const WM_USER_MSTATBRINGUP: u32 = 1055;
pub const WM_USER_NONCONFIRM_CLOSE: u32 = 1064;
pub const IdTCPIP: u32 = 1;
pub const IdSerial: u32 = 2;
pub const IdFile: u32 = 3;
pub const IdNamedPipe: u32 = 4;
pub const XoptCheck: u32 = 1;
pub const XoptCRC: u32 = 2;
pub const Xopt1kCRC: u32 = 3;
pub const Xopt1kCksum: u32 = 4;
pub const Yopt1K: u32 = 1;
pub const YoptG: u32 = 2;
pub const YoptSingle: u32 = 3;
pub const KmtOptLongPacket: u32 = 1;
pub const KmtOptFileAttr: u32 = 2;
pub const KmtOptSlideWin: u32 = 4;
pub const LOG_TEL: u32 = 1;
pub const LOG_KMT: u32 = 2;
pub const LOG_X: u32 = 4;
pub const LOG_Z: u32 = 8;
pub const LOG_BP: u32 = 16;
pub const LOG_QV: u32 = 32;
pub const LOG_Y: u32 = 64;
pub const FT_ZESCCTL: u32 = 1;
pub const FT_ZAUTO: u32 = 2;
pub const FT_BPESCCTL: u32 = 4;
pub const FT_BPAUTO: u32 = 8;
pub const FT_RENAME: u32 = 16;
pub const MF_NOSHOWMENU: u32 = 1;
pub const MF_NOPOPUP: u32 = 2;
pub const MF_SHOWWINMENU: u32 = 8;
pub const TF_FIXEDJIS: u32 = 1;
pub const TF_AUTOINVOKE: u32 = 2;
pub const TF_CTRLINKANJI: u32 = 8;
pub const TF_ALLOWWRONGSEQUENCE: u32 = 16;
pub const TF_ACCEPT8BITCTRL: u32 = 32;
pub const TF_ENABLESLINE: u32 = 64;
pub const TF_BACKWRAP: u32 = 128;
pub const TF_CLEARONRESIZE: u32 = 256;
pub const TF_ALTSCR: u32 = 512;
pub const TF_LOCKTUID: u32 = 1024;
pub const TF_INVALIDDECRPSS: u32 = 2048;
pub const TF_PRINTERCTRL: u32 = 4096;
pub const TF_REMOTECLEARSBUFF: u32 = 8192;
pub const CF_PCBOLD16: u32 = 1;
pub const CF_AIXTERM16: u32 = 2;
pub const CF_XTERM256: u32 = 4;
pub const CF_FULLCOLOR: u32 = 7;
pub const CF_ANSICOLOR: u32 = 8;
pub const CF_BOLDCOLOR: u32 = 16;
pub const CF_BLINKCOLOR: u32 = 32;
pub const CF_REVERSECOLOR: u32 = 64;
pub const CF_URLCOLOR: u32 = 128;
pub const CF_USETEXTCOLOR: u32 = 256;
pub const CF_REVERSEVIDEO: u32 = 512;
pub const CF_UNDERLINE: u32 = 1024;
pub const FF_BOLD: u32 = 1;
pub const FF_FAINT: u32 = 2;
pub const FF_ITALIC: u32 = 4;
pub const FF_UNDERLINE: u32 = 8;
pub const FF_BLINK: u32 = 16;
pub const FF_RAPIDBLINK: u32 = 32;
pub const FF_REVERSE: u32 = 64;
pub const FF_INVISIBLE: u32 = 128;
pub const FF_STRIKEOUT: u32 = 256;
pub const FF_URLUNDERLINE: u32 = 512;
pub const PF_CONFIRMDISCONN: u32 = 1;
pub const PF_BEEPONCONNECT: u32 = 2;
pub const WF_CURSORCHANGE: u32 = 1;
pub const WF_WINDOWCHANGE: u32 = 2;
pub const WF_WINDOWREPORT: u32 = 4;
pub const WF_TITLEREPORT: u32 = 24;
pub const WF_IMECURSORCHANGE: u32 = 32;
pub const TABF_NONE: u32 = 0;
pub const TABF_HTS7: u32 = 1;
pub const TABF_HTS8: u32 = 2;
pub const TABF_TBC0: u32 = 4;
pub const TABF_TBC3: u32 = 8;
pub const TABF_HTS: u32 = 3;
pub const TABF_TBC: u32 = 12;
pub const TABF_ALL: u32 = 15;
pub const ISO2022_SHIFT_NONE: u32 = 0;
pub const ISO2022_SI: u32 = 1;
pub const ISO2022_SO: u32 = 2;
pub const ISO2022_LS2: u32 = 4;
pub const ISO2022_LS3: u32 = 8;
pub const ISO2022_LS1R: u32 = 16;
pub const ISO2022_LS2R: u32 = 32;
pub const ISO2022_LS3R: u32 = 64;
pub const ISO2022_SS2: u32 = 256;
pub const ISO2022_SS3: u32 = 512;
pub const ISO2022_LS: u32 = 15;
pub const ISO2022_LSR: u32 = 112;
pub const ISO2022_SS: u32 = 768;
pub const ISO2022_SHIFT_ALL: u32 = 895;
pub const CSF_CBNONE: u32 = 0;
pub const CSF_CBWRITE: u32 = 1;
pub const CSF_CBREAD: u32 = 2;
pub const CSF_CBRW: u32 = 3;
pub const CSF_CBMASK: u32 = 3;
pub const DBGF_NONE: u32 = 0;
pub const DBGF_NORM: u32 = 1;
pub const DBGF_HEXD: u32 = 2;
pub const DBGF_NOUT: u32 = 4;
pub const DBGF_ALL: u32 = 7;
pub const CPF_DISABLE_RBUTTON: u32 = 1;
pub const CPF_CONFIRM_RBUTTON: u32 = 2;
pub const CPF_DISABLE_MBUTTON: u32 = 4;
pub const CPF_CONFIRM_CHANGEPASTE: u32 = 16;
pub const CPF_CONFIRM_CHANGEPASTE_CR: u32 = 32;
pub const CPF_TRIM_TRAILING_NL: u32 = 256;
pub const IdTitleReportIgnore: u32 = 0;
pub const IdTitleReportAccept: u32 = 8;
pub const IdTitleReportEmpty: u32 = 24;
pub const IdIconDefault: u32 = 0;
pub const IdBeepOff: u32 = 0;
pub const IdBeepOn: u32 = 1;
pub const IdBeepVisual: u32 = 2;
pub const IdTitleChangeRequestOff: u32 = 0;
pub const IdTitleChangeRequestOverwrite: u32 = 1;
pub const IdTitleChangeRequestAhead: u32 = 2;
pub const IdTitleChangeRequestLast: u32 = 3;
pub const IdTitleChangeRequestMax: u32 = 3;
pub const IdMeta8BitOff: u32 = 0;
pub const IdMeta8BitRaw: u32 = 1;
pub const IdMeta8BitText: u32 = 2;
pub const TitleBuffSize: u32 = 50;
pub const IdCR: u32 = 1;
pub const IdCRLF: u32 = 2;
pub const IdLF: u32 = 3;
pub const IdAUTO: u32 = 4;
pub const IdVT100: u32 = 1;
pub const IdVT100J: u32 = 2;
pub const IdVT101: u32 = 3;
pub const IdVT102: u32 = 4;
pub const IdVT102J: u32 = 5;
pub const IdVT220J: u32 = 6;
pub const IdVT282: u32 = 7;
pub const IdVT320: u32 = 8;
pub const IdVT382: u32 = 9;
pub const IdVT420: u32 = 10;
pub const IdVT520: u32 = 11;
pub const IdVT525: u32 = 12;
pub const TermWidthMax: u32 = 1000;
pub const TermHeightMax: u32 = 500;
pub const IdBlkCur: u32 = 1;
pub const IdVCur: u32 = 2;
pub const IdHCur: u32 = 3;
pub const IdBS: u32 = 1;
pub const IdDEL: u32 = 2;
pub const IdMetaOff: u32 = 0;
pub const IdMetaOn: u32 = 1;
pub const IdMetaLeft: u32 = 2;
pub const IdMetaRight: u32 = 3;
pub const IdMouseTrackNone: u32 = 0;
pub const IdMouseTrackDECELR: u32 = 1;
pub const IdMouseTrackX10: u32 = 2;
pub const IdMouseTrackVT200: u32 = 3;
pub const IdMouseTrackVT200Hl: u32 = 4;
pub const IdMouseTrackBtnEvent: u32 = 5;
pub const IdMouseTrackAllEvent: u32 = 6;
pub const IdMouseTrackNetTerm: u32 = 7;
pub const IdMouseTrackJSBTerm: u32 = 8;
pub const IdMouseTrackExtNone: u32 = 0;
pub const IdMouseTrackExtUTF8: u32 = 1;
pub const IdMouseTrackExtSGR: u32 = 2;
pub const IdMouseTrackExtURXVT: u32 = 3;
pub const IdMouseEventCurStat: u32 = 0;
pub const IdMouseEventBtnDown: u32 = 1;
pub const IdMouseEventBtnUp: u32 = 2;
pub const IdMouseEventMove: u32 = 3;
pub const IdMouseEventWheel: u32 = 4;
pub const IdLeftButton: u32 = 0;
pub const IdMiddleButton: u32 = 1;
pub const IdRightButton: u32 = 2;
pub const IdButtonRelease: u32 = 3;
pub const IdCOM1: u32 = 1;
pub const IdCOM2: u32 = 2;
pub const IdCOM3: u32 = 3;
pub const IdCOM4: u32 = 4;
pub const BaudNone: u32 = 0;
pub const IdParityNone: u32 = 1;
pub const IdParityOdd: u32 = 2;
pub const IdParityEven: u32 = 3;
pub const IdParityMark: u32 = 4;
pub const IdParitySpace: u32 = 5;
pub const IdDataBit7: u32 = 1;
pub const IdDataBit8: u32 = 2;
pub const IdStopBit1: u32 = 1;
pub const IdStopBit2: u32 = 2;
pub const IdFlowX: u32 = 1;
pub const IdFlowHard: u32 = 2;
pub const IdFlowNone: u32 = 3;
pub const IdFlowHardDsrDtr: u32 = 4;
pub const NUL: u32 = 0;
pub const SOH: u32 = 1;
pub const STX: u32 = 2;
pub const ETX: u32 = 3;
pub const EOT: u32 = 4;
pub const ENQ: u32 = 5;
pub const ACK: u32 = 6;
pub const BEL: u32 = 7;
pub const BS: u32 = 8;
pub const HT: u32 = 9;
pub const LF: u32 = 10;
pub const VT: u32 = 11;
pub const FF: u32 = 12;
pub const CR: u32 = 13;
pub const SO: u32 = 14;
pub const SI: u32 = 15;
pub const DLE: u32 = 16;
pub const DC1: u32 = 17;
pub const XON: u32 = 17;
pub const DC2: u32 = 18;
pub const DC3: u32 = 19;
pub const XOFF: u32 = 19;
pub const DC4: u32 = 20;
pub const NAK: u32 = 21;
pub const SYN: u32 = 22;
pub const ETB: u32 = 23;
pub const CAN: u32 = 24;
pub const EM: u32 = 25;
pub const SUB: u32 = 26;
pub const ESC: u32 = 27;
pub const FS: u32 = 28;
pub const GS: u32 = 29;
pub const RS: u32 = 30;
pub const US: u32 = 31;
pub const SP: u32 = 32;
pub const DEL: u32 = 127;
pub const IND: u32 = 132;
pub const NEL: u32 = 133;
pub const SSA: u32 = 134;
pub const ESA: u32 = 135;
pub const HTS: u32 = 136;
pub const HTJ: u32 = 137;
pub const VTS: u32 = 138;
pub const PLD: u32 = 139;
pub const PLU: u32 = 140;
pub const RI: u32 = 141;
pub const SS2: u32 = 142;
pub const SS3: u32 = 143;
pub const DCS: u32 = 144;
pub const PU1: u32 = 145;
pub const PU2: u32 = 146;
pub const STS: u32 = 147;
pub const CCH: u32 = 148;
pub const MW: u32 = 149;
pub const SPA: u32 = 150;
pub const EPA: u32 = 151;
pub const SOS: u32 = 152;
pub const CSI: u32 = 155;
pub const ST: u32 = 156;
pub const OSC: u32 = 157;
pub const PM: u32 = 158;
pub const APC: u32 = 159;
pub const InBuffSize: u32 = 1024;
pub const OutBuffSize: u32 = 16384;
pub const ID_FILE: u32 = 0;
pub const ID_EDIT: u32 = 1;
pub const ID_SETUP: u32 = 2;
pub const ID_CONTROL: u32 = 3;
pub const ID_HELPMENU: u32 = 4;
pub const ID_WINDOW_1: u32 = 50801;
pub const ID_WINDOW_WINDOW: u32 = 50810;
pub const ID_WINDOW_MINIMIZEALL: u32 = 50811;
pub const ID_WINDOW_RESTOREALL: u32 = 50812;
pub const ID_WINDOW_CASCADEALL: u32 = 50813;
pub const ID_WINDOW_STACKED: u32 = 50814;
pub const ID_WINDOW_SIDEBYSIDE: u32 = 50815;
pub const ID_WINDOW_UNDO: u32 = 50816;
pub const ID_TEKWINDOW_WINDOW: u32 = 51810;
pub const ID_TRANSFER: u32 = 9;
pub const ID_SHOWMENUBAR: u32 = 995;
pub const MAXNWIN: u32 = 256;
pub const MAXCOMPORT: u32 = 4096;
pub const MAXHOSTLIST: u32 = 500;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type USHORT = ::std::os::raw::c_ushort;
pub type DWORD = ::std::os::raw::c_ulong;
pub type BOOL = ::std::os::raw::c_int;
pub type BYTE = ::std::os::raw::c_uchar;
pub type WORD = ::std::os::raw::c_ushort;
pub type PBOOL = *mut BOOL;
pub type LPDWORD = *mut DWORD;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type LPCVOID = *const ::std::os::raw::c_void;
pub type __time64_t = ::std::os::raw::c_longlong;
pub type time_t = __time64_t;
pub type UINT_PTR = ::std::os::raw::c_uint;
pub type ULONG_PTR = ::std::os::raw::c_ulong;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type CHAR = ::std::os::raw::c_char;
pub type LONG = ::std::os::raw::c_long;
pub type PCHAR = *mut CHAR;
pub type LPCSTR = *const CHAR;
pub type HANDLE = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HINSTANCE__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HINSTANCE__"][::std::mem::size_of::<HINSTANCE__>() - 4usize];
    ["Alignment of HINSTANCE__"][::std::mem::align_of::<HINSTANCE__>() - 4usize];
    ["Offset of field: HINSTANCE__::unused"][::std::mem::offset_of!(HINSTANCE__, unused) - 0usize];
};
pub type HINSTANCE = *mut HINSTANCE__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HFONT__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HFONT__"][::std::mem::size_of::<HFONT__>() - 4usize];
    ["Alignment of HFONT__"][::std::mem::align_of::<HFONT__>() - 4usize];
    ["Offset of field: HFONT__::unused"][::std::mem::offset_of!(HFONT__, unused) - 0usize];
};
pub type HFONT = *mut HFONT__;
pub type COLORREF = DWORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPOINT {
    pub x: LONG,
    pub y: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPOINT"][::std::mem::size_of::<tagPOINT>() - 8usize];
    ["Alignment of tagPOINT"][::std::mem::align_of::<tagPOINT>() - 4usize];
    ["Offset of field: tagPOINT::x"][::std::mem::offset_of!(tagPOINT, x) - 0usize];
    ["Offset of field: tagPOINT::y"][::std::mem::offset_of!(tagPOINT, y) - 4usize];
};
pub type POINT = tagPOINT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagSIZE {
    pub cx: LONG,
    pub cy: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagSIZE"][::std::mem::size_of::<tagSIZE>() - 8usize];
    ["Alignment of tagSIZE"][::std::mem::align_of::<tagSIZE>() - 4usize];
    ["Offset of field: tagSIZE::cx"][::std::mem::offset_of!(tagSIZE, cx) - 0usize];
    ["Offset of field: tagSIZE::cy"][::std::mem::offset_of!(tagSIZE, cy) - 4usize];
};
pub type SIZE = tagSIZE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_ATTRIBUTES {
    pub nLength: DWORD,
    pub lpSecurityDescriptor: LPVOID,
    pub bInheritHandle: BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SECURITY_ATTRIBUTES"][::std::mem::size_of::<_SECURITY_ATTRIBUTES>() - 12usize];
    ["Alignment of _SECURITY_ATTRIBUTES"][::std::mem::align_of::<_SECURITY_ATTRIBUTES>() - 4usize];
    ["Offset of field: _SECURITY_ATTRIBUTES::nLength"]
        [::std::mem::offset_of!(_SECURITY_ATTRIBUTES, nLength) - 0usize];
    ["Offset of field: _SECURITY_ATTRIBUTES::lpSecurityDescriptor"]
        [::std::mem::offset_of!(_SECURITY_ATTRIBUTES, lpSecurityDescriptor) - 4usize];
    ["Offset of field: _SECURITY_ATTRIBUTES::bInheritHandle"]
        [::std::mem::offset_of!(_SECURITY_ATTRIBUTES, bInheritHandle) - 8usize];
};
pub type LPSECURITY_ATTRIBUTES = *mut _SECURITY_ATTRIBUTES;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _OVERLAPPED__bindgen_ty_1 {
    pub __bindgen_anon_1: _OVERLAPPED__bindgen_ty_1__bindgen_ty_1,
    pub Pointer: PVOID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OVERLAPPED__bindgen_ty_1__bindgen_ty_1 {
    pub Offset: DWORD,
    pub OffsetHigh: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OVERLAPPED__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of _OVERLAPPED__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: _OVERLAPPED__bindgen_ty_1__bindgen_ty_1::Offset"]
        [::std::mem::offset_of!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1, Offset) - 0usize];
    ["Offset of field: _OVERLAPPED__bindgen_ty_1__bindgen_ty_1::OffsetHigh"]
        [::std::mem::offset_of!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1, OffsetHigh) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OVERLAPPED__bindgen_ty_1"]
        [::std::mem::size_of::<_OVERLAPPED__bindgen_ty_1>() - 8usize];
    ["Alignment of _OVERLAPPED__bindgen_ty_1"]
        [::std::mem::align_of::<_OVERLAPPED__bindgen_ty_1>() - 4usize];
    ["Offset of field: _OVERLAPPED__bindgen_ty_1::Pointer"]
        [::std::mem::offset_of!(_OVERLAPPED__bindgen_ty_1, Pointer) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLOGFONTA {
    pub lfHeight: LONG,
    pub lfWidth: LONG,
    pub lfEscapement: LONG,
    pub lfOrientation: LONG,
    pub lfWeight: LONG,
    pub lfItalic: BYTE,
    pub lfUnderline: BYTE,
    pub lfStrikeOut: BYTE,
    pub lfCharSet: BYTE,
    pub lfOutPrecision: BYTE,
    pub lfClipPrecision: BYTE,
    pub lfQuality: BYTE,
    pub lfPitchAndFamily: BYTE,
    pub lfFaceName: [CHAR; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagLOGFONTA"][::std::mem::size_of::<tagLOGFONTA>() - 60usize];
    ["Alignment of tagLOGFONTA"][::std::mem::align_of::<tagLOGFONTA>() - 4usize];
    ["Offset of field: tagLOGFONTA::lfHeight"]
        [::std::mem::offset_of!(tagLOGFONTA, lfHeight) - 0usize];
    ["Offset of field: tagLOGFONTA::lfWidth"]
        [::std::mem::offset_of!(tagLOGFONTA, lfWidth) - 4usize];
    ["Offset of field: tagLOGFONTA::lfEscapement"]
        [::std::mem::offset_of!(tagLOGFONTA, lfEscapement) - 8usize];
    ["Offset of field: tagLOGFONTA::lfOrientation"]
        [::std::mem::offset_of!(tagLOGFONTA, lfOrientation) - 12usize];
    ["Offset of field: tagLOGFONTA::lfWeight"]
        [::std::mem::offset_of!(tagLOGFONTA, lfWeight) - 16usize];
    ["Offset of field: tagLOGFONTA::lfItalic"]
        [::std::mem::offset_of!(tagLOGFONTA, lfItalic) - 20usize];
    ["Offset of field: tagLOGFONTA::lfUnderline"]
        [::std::mem::offset_of!(tagLOGFONTA, lfUnderline) - 21usize];
    ["Offset of field: tagLOGFONTA::lfStrikeOut"]
        [::std::mem::offset_of!(tagLOGFONTA, lfStrikeOut) - 22usize];
    ["Offset of field: tagLOGFONTA::lfCharSet"]
        [::std::mem::offset_of!(tagLOGFONTA, lfCharSet) - 23usize];
    ["Offset of field: tagLOGFONTA::lfOutPrecision"]
        [::std::mem::offset_of!(tagLOGFONTA, lfOutPrecision) - 24usize];
    ["Offset of field: tagLOGFONTA::lfClipPrecision"]
        [::std::mem::offset_of!(tagLOGFONTA, lfClipPrecision) - 25usize];
    ["Offset of field: tagLOGFONTA::lfQuality"]
        [::std::mem::offset_of!(tagLOGFONTA, lfQuality) - 26usize];
    ["Offset of field: tagLOGFONTA::lfPitchAndFamily"]
        [::std::mem::offset_of!(tagLOGFONTA, lfPitchAndFamily) - 27usize];
    ["Offset of field: tagLOGFONTA::lfFaceName"]
        [::std::mem::offset_of!(tagLOGFONTA, lfFaceName) - 28usize];
};
pub type LPLOGFONTA = *mut tagLOGFONTA;
pub type LPLOGFONT = LPLOGFONTA;
pub const IdTalk_IdTalkKeyb: IdTalk = 0;
pub const IdTalk_IdTalkFile: IdTalk = 2;
pub const IdTalk_IdTalkQuiet: IdTalk = 3;
pub const IdTalk_IdTalkSendMem: IdTalk = 4;
pub type IdTalk = ::std::os::raw::c_int;
pub const rotate_mode_ROTATE_NONE: rotate_mode = 0;
pub const rotate_mode_ROTATE_SIZE: rotate_mode = 1;
pub type rotate_mode = ::std::os::raw::c_int;
pub const LogTimestampType_TIMESTAMP_LOCAL: LogTimestampType = 0;
pub const LogTimestampType_TIMESTAMP_UTC: LogTimestampType = 1;
pub const LogTimestampType_TIMESTAMP_ELAPSED_LOGSTART: LogTimestampType = 2;
pub const LogTimestampType_TIMESTAMP_ELAPSED_CONNECTED: LogTimestampType = 3;
pub type LogTimestampType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eterm_lookfeel_t {
    pub BGEnable: ::std::os::raw::c_int,
    pub BGUseAlphaBlendAPI: ::std::os::raw::c_int,
    pub reserve_BGSPIPath: [::std::os::raw::c_char; 260usize],
    pub BGFastSizeMove: ::std::os::raw::c_int,
    pub BGNoCopyBits: ::std::os::raw::c_int,
    pub BGNoFrame: ::std::os::raw::c_int,
    pub reserver_BGThemeFile: [::std::os::raw::c_char; 252usize],
    pub BGThemeFileW: *mut wchar_t,
    pub BGSPIPathW: *mut wchar_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of eterm_lookfeel_t"][::std::mem::size_of::<eterm_lookfeel_t>() - 540usize];
    ["Alignment of eterm_lookfeel_t"][::std::mem::align_of::<eterm_lookfeel_t>() - 4usize];
    ["Offset of field: eterm_lookfeel_t::BGEnable"]
        [::std::mem::offset_of!(eterm_lookfeel_t, BGEnable) - 0usize];
    ["Offset of field: eterm_lookfeel_t::BGUseAlphaBlendAPI"]
        [::std::mem::offset_of!(eterm_lookfeel_t, BGUseAlphaBlendAPI) - 4usize];
    ["Offset of field: eterm_lookfeel_t::reserve_BGSPIPath"]
        [::std::mem::offset_of!(eterm_lookfeel_t, reserve_BGSPIPath) - 8usize];
    ["Offset of field: eterm_lookfeel_t::BGFastSizeMove"]
        [::std::mem::offset_of!(eterm_lookfeel_t, BGFastSizeMove) - 268usize];
    ["Offset of field: eterm_lookfeel_t::BGNoCopyBits"]
        [::std::mem::offset_of!(eterm_lookfeel_t, BGNoCopyBits) - 272usize];
    ["Offset of field: eterm_lookfeel_t::BGNoFrame"]
        [::std::mem::offset_of!(eterm_lookfeel_t, BGNoFrame) - 276usize];
    ["Offset of field: eterm_lookfeel_t::reserver_BGThemeFile"]
        [::std::mem::offset_of!(eterm_lookfeel_t, reserver_BGThemeFile) - 280usize];
    ["Offset of field: eterm_lookfeel_t::BGThemeFileW"]
        [::std::mem::offset_of!(eterm_lookfeel_t, BGThemeFileW) - 532usize];
    ["Offset of field: eterm_lookfeel_t::BGSPIPathW"]
        [::std::mem::offset_of!(eterm_lookfeel_t, BGSPIPathW) - 536usize];
};
#[doc = "\tTTTSet\n\t\t�Z�b�V�����\u{315}�����\n\t\t���\u{30d}\\���\u{302}\u{355}�����ɃR�s�[�����\n\t\tpath���A���I�Ɋm�ۂ��������\u{303}R�s�[��\n\t\t../ttcmn_dup.cpp ���Q��"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tttset {
    pub HomeDir: [::std::os::raw::c_char; 256usize],
    pub SetupFName: [::std::os::raw::c_char; 260usize],
    pub reserve_KeyCnfFN: [::std::os::raw::c_char; 260usize],
    pub LogFN: [::std::os::raw::c_char; 260usize],
    pub reserve_MacroFN: [::std::os::raw::c_char; 260usize],
    pub HostName: [::std::os::raw::c_char; 1024usize],
    pub VTPos: POINT,
    pub VTFont: [::std::os::raw::c_char; 32usize],
    pub VTFontSize: POINT,
    pub VTFontCharSet: ::std::os::raw::c_int,
    pub FontDW: ::std::os::raw::c_int,
    pub FontDH: ::std::os::raw::c_int,
    pub FontDX: ::std::os::raw::c_int,
    pub FontDY: ::std::os::raw::c_int,
    pub PrnFont: [::std::os::raw::c_char; 32usize],
    pub PrnFontSize: POINT,
    pub PrnFontCharSet: ::std::os::raw::c_int,
    pub VTPPI: POINT,
    pub TEKPPI: POINT,
    pub PrnMargin: [::std::os::raw::c_int; 4usize],
    pub PrnDev: [::std::os::raw::c_char; 80usize],
    pub PassThruDelay: WORD,
    pub PrnConvFF: WORD,
    pub FontFlag: WORD,
    pub reserve_RussFont: WORD,
    pub ScrollThreshold: ::std::os::raw::c_int,
    pub Debug: WORD,
    pub LogFlag: WORD,
    pub FTFlag: WORD,
    pub TransBin: WORD,
    pub Append: WORD,
    pub XmodemOpt: WORD,
    pub XmodemBin: WORD,
    pub ZmodemDataLen: ::std::os::raw::c_int,
    pub ZmodemWinSize: ::std::os::raw::c_int,
    pub QVWinSize: ::std::os::raw::c_int,
    pub reserve_FileDir: [::std::os::raw::c_char; 256usize],
    pub FileSendFilter: [::std::os::raw::c_char; 128usize],
    pub reserve_Language: WORD,
    pub reserver_DelimList: [::std::os::raw::c_char; 52usize],
    pub DelimDBCS: WORD,
    pub Minimize: WORD,
    pub HideWindow: WORD,
    pub MenuFlag: WORD,
    pub SelOnActive: WORD,
    pub AutoTextCopy: WORD,
    pub TEKPos: POINT,
    pub TEKFont: [::std::os::raw::c_char; 32usize],
    pub TEKFontSize: POINT,
    pub TEKFontCharSet: ::std::os::raw::c_int,
    pub GINMouseCode: ::std::os::raw::c_int,
    pub TerminalWidth: ::std::os::raw::c_int,
    pub TerminalHeight: ::std::os::raw::c_int,
    pub TermIsWin: WORD,
    pub AutoWinResize: WORD,
    pub CRSend: WORD,
    pub CRReceive: WORD,
    pub LocalEcho: WORD,
    pub Answerback: [::std::os::raw::c_char; 32usize],
    pub AnswerbackLen: ::std::os::raw::c_int,
    pub KanjiCode: WORD,
    pub KanjiCodeSend: WORD,
    pub JIS7Katakana: WORD,
    pub JIS7KatakanaSend: WORD,
    pub KanjiIn: WORD,
    pub KanjiOut: WORD,
    pub reserve_RussHost: WORD,
    pub reserve_RussClient: WORD,
    pub reserve_RussPrint: WORD,
    pub AutoWinSwitch: WORD,
    pub TerminalID: WORD,
    pub TermFlag: WORD,
    pub reserve_VTFlag: WORD,
    pub SampleFont: HFONT,
    pub reserve_TmpColor: [[WORD; 6usize]; 12usize],
    pub Title: [::std::os::raw::c_char; 50usize],
    pub TitleFormat: WORD,
    pub CursorShape: WORD,
    pub NonblinkingCursor: WORD,
    pub EnableScrollBuff: WORD,
    pub ScrollBuffSize: LONG,
    pub ScrollBuffMax: LONG,
    pub HideTitle: WORD,
    pub PopupMenu: WORD,
    pub ColorFlag: ::std::os::raw::c_int,
    pub TEKColorEmu: WORD,
    pub VTColor: [COLORREF; 2usize],
    pub TEKColor: [COLORREF; 2usize],
    pub URLColor: [COLORREF; 2usize],
    pub VTBoldColor: [COLORREF; 2usize],
    pub VTFaintColor: [COLORREF; 2usize],
    pub VTItalicColor: [COLORREF; 2usize],
    pub VTUnderlineColor: [COLORREF; 2usize],
    pub VTBlinkColor: [COLORREF; 2usize],
    pub VTRapidBlinkColor: [COLORREF; 2usize],
    pub VTReverseColor: [COLORREF; 2usize],
    pub VTInvisibleColor: [COLORREF; 2usize],
    pub VTStrikeoutColor: [COLORREF; 2usize],
    pub DummyColor: [COLORREF; 2usize],
    pub Beep: WORD,
    pub BSKey: WORD,
    pub DelKey: WORD,
    pub UseIME: WORD,
    pub IMEInline: WORD,
    pub MetaKey: WORD,
    pub RussKeyb: WORD,
    pub PortType: WORD,
    pub TCPPort: WORD,
    pub Telnet: WORD,
    pub TelPort: WORD,
    pub TelBin: WORD,
    pub TelEcho: WORD,
    pub TermType: [::std::os::raw::c_char; 40usize],
    pub AutoWinClose: WORD,
    pub PortFlag: WORD,
    pub TCPCRSend: WORD,
    pub TCPLocalEcho: WORD,
    pub HistoryList: WORD,
    pub ComPort: WORD,
    pub Baud_: WORD,
    pub Parity: WORD,
    pub DataBit: WORD,
    pub StopBit: WORD,
    pub Flow: WORD,
    pub DelayPerChar: WORD,
    pub DelayPerLine: WORD,
    pub MaxComPort: WORD,
    pub ComAutoConnect: WORD,
    pub EnableContinuedLineCopy: WORD,
    pub ANSIColor: [COLORREF; 16usize],
    pub ProtocolFamily: ::std::os::raw::c_int,
    pub MouseCursorName: [::std::os::raw::c_char; 16usize],
    pub AlphaBlendActive: BYTE,
    pub AlphaBlendInactive: BYTE,
    pub reserve_0: [BYTE; 2usize],
    pub CygwinDirectory: [::std::os::raw::c_char; 260usize],
    pub reserve_Locale: [::std::os::raw::c_char; 80usize],
    pub reserve_CodePage: ::std::os::raw::c_int,
    pub DuplicateSession: ::std::os::raw::c_int,
    pub reserve_ViewlogEditor: [::std::os::raw::c_char; 260usize],
    pub LogTypePlainText: WORD,
    pub LogTimestamp: WORD,
    pub reserve_LogDefaultName: [::std::os::raw::c_char; 80usize],
    pub reserve_LogDefaultPath: [::std::os::raw::c_char; 260usize],
    pub LogAutoStart: WORD,
    pub PasteFlag: ::std::os::raw::c_uint,
    pub FallbackToCP932: WORD,
    pub DisableAcceleratorSendBreak: WORD,
    pub EnableClickableUrl: ::std::os::raw::c_int,
    pub EtermLookfeel: eterm_lookfeel_t,
    pub UseNormalBGColor: WORD,
    pub reserve_UILanguageFile: [::std::os::raw::c_char; 260usize],
    pub reserve_UIMsg: [::std::os::raw::c_char; 1024usize],
    pub BroadcastCommandHistory: WORD,
    pub AcceptBroadcast: WORD,
    pub DisableTCPEchoCR: WORD,
    pub ConnectingTimeout: ::std::os::raw::c_int,
    pub VTCompatTab: WORD,
    pub TelKeepAliveInterval: WORD,
    pub MaxBroadcatHistory: WORD,
    pub DisableAppKeypad: WORD,
    pub DisableAppCursor: WORD,
    pub ClearComBuffOnOpen: WORD,
    pub Send8BitCtrl: WORD,
    pub reserve_UILanguageFile_ini: [::std::os::raw::c_char; 260usize],
    pub SelectOnlyByLButton: WORD,
    pub TelAutoDetect: WORD,
    pub XModemRcvCommand: [::std::os::raw::c_char; 260usize],
    pub ZModemRcvCommand: [::std::os::raw::c_char; 260usize],
    pub ConfirmFileDragAndDrop: WORD,
    pub TranslateWheelToCursor: WORD,
    pub HostDialogOnStartup: WORD,
    pub MouseEventTracking: WORD,
    pub KillFocusCursor: WORD,
    pub LogHideDialog: WORD,
    pub FTHideDialog: WORD,
    pub TerminalOldWidth: ::std::os::raw::c_int,
    pub TerminalOldHeight: ::std::os::raw::c_int,
    pub MaximizedBugTweak: WORD,
    pub NotifyClipboardAccess: WORD,
    pub SaveVTWinPos: WORD,
    pub LogTimestampType: WORD,
    pub MouseWheelScrollLine: ::std::os::raw::c_int,
    pub CRSend_ini: WORD,
    pub LocalEcho_ini: WORD,
    pub UnicodeDecSpMapping: WORD,
    pub VTIcon: WORD,
    pub TEKIcon: WORD,
    pub ScrollWindowClearScreen: WORD,
    pub AutoScrollOnlyInBottomLine: WORD,
    pub reserve_UnknownUnicodeCharaAsWide: WORD,
    pub YModemRcvCommand: [::std::os::raw::c_char; 260usize],
    pub AcceptTitleChangeRequest: WORD,
    pub PasteDialogSize: SIZE,
    pub DisableMouseTrackingByCtrl: WORD,
    pub DisableWheelToCursorByCtrl: WORD,
    pub StrictKeyMapping: WORD,
    pub Wait4allMacroCommand: WORD,
    pub DisableMenuSendBreak: WORD,
    pub ClearScreenOnCloseConnection: WORD,
    pub DisableAcceleratorDuplicateSession: WORD,
    pub PasteDelayPerLine: ::std::os::raw::c_int,
    pub FontScaling: WORD,
    pub Meta8Bit: WORD,
    pub WindowFlag: WORD,
    pub EnableLineMode: WORD,
    pub ConfirmChangePasteStringFile: [::std::os::raw::c_char; 260usize],
    pub Baud: DWORD,
    pub LogBinary: WORD,
    pub DisableMenuDuplicateSession: WORD,
    pub DisableMenuNewConnection: WORD,
    pub TerminalUID: [::std::os::raw::c_char; 9usize],
    pub ISO2022Flag: WORD,
    pub JumpList: WORD,
    pub TabStopFlag: WORD,
    pub CtrlFlag: DWORD,
    pub ClickableUrlBrowser: [::std::os::raw::c_char; 260usize],
    pub ClickableUrlBrowserArg: [::std::os::raw::c_char; 260usize],
    pub LogLockExclusive: WORD,
    pub KermitOpt: WORD,
    pub FontQuality: WORD,
    pub ScpSendDir: [::std::os::raw::c_char; 256usize],
    pub reserver_BGImageFilePath: [::std::os::raw::c_char; 260usize],
    pub LogRotate: ::std::os::raw::c_int,
    pub LogRotateSize: DWORD,
    pub LogRotateSizeType: WORD,
    pub LogRotateStep: WORD,
    pub DeferredLogWriteMode: WORD,
    pub BeepOverUsedCount: DWORD,
    pub BeepOverUsedTime: DWORD,
    pub BeepSuppressTime: DWORD,
    pub LogAllBuffIncludedInFirst: WORD,
    pub MaxOSCBufferSize: ::std::os::raw::c_uint,
    pub JoinSplitURL: WORD,
    pub JoinSplitURLIgnoreEOLChar: ::std::os::raw::c_char,
    pub MulticastName: [::std::os::raw::c_char; 260usize],
    pub DebugModes: WORD,
    pub AcceleratorNewConnection: WORD,
    pub AcceleratorCygwinConnection: WORD,
    pub SendBreakTime: ::std::os::raw::c_int,
    pub FileSendHighSpeedMode: WORD,
    pub AutoComPortReconnect: WORD,
    pub reserver_BGImgBrightness: WORD,
    pub reserve_CygtermSettings: [::std::os::raw::c_char; 720usize],
    pub XmodemTimeOutInit: ::std::os::raw::c_int,
    pub XmodemTimeOutInitCRC: ::std::os::raw::c_int,
    pub XmodemTimeOutShort: ::std::os::raw::c_int,
    pub XmodemTimeOutLong: ::std::os::raw::c_int,
    pub XmodemTimeOutVLong: ::std::os::raw::c_int,
    pub YmodemTimeOutInit: ::std::os::raw::c_int,
    pub YmodemTimeOutInitCRC: ::std::os::raw::c_int,
    pub YmodemTimeOutShort: ::std::os::raw::c_int,
    pub YmodemTimeOutLong: ::std::os::raw::c_int,
    pub YmodemTimeOutVLong: ::std::os::raw::c_int,
    pub ZmodemTimeOutNormal: ::std::os::raw::c_int,
    pub ZmodemTimeOutTCPIP: ::std::os::raw::c_int,
    pub ZmodemTimeOutInit: ::std::os::raw::c_int,
    pub ZmodemTimeOutFin: ::std::os::raw::c_int,
    pub WaitCom: WORD,
    pub ListHiddenFonts: WORD,
    pub LogTimestampFormat: [::std::os::raw::c_char; 48usize],
    pub TerminalInputSpeed: ::std::os::raw::c_int,
    pub TerminalOutputSpeed: ::std::os::raw::c_int,
    pub reserve_DialogFontName: [::std::os::raw::c_char; 32usize],
    pub DialogFontPoint: ::std::os::raw::c_int,
    pub DialogFontCharSet: ::std::os::raw::c_int,
    pub ConfigVersion: ::std::os::raw::c_int,
    pub RunningVersion: ::std::os::raw::c_int,
    pub SelectStartDelay: DWORD,
    pub UnicodeAmbiguousWidth: BYTE,
    pub UnicodeEmojiOverride: BYTE,
    pub UnicodeEmojiWidth: BYTE,
    pub HomeDirW: *mut wchar_t,
    pub SetupFNameW: *mut wchar_t,
    pub KeyCnfFNW: *mut wchar_t,
    pub LogFNW: *mut wchar_t,
    pub MacroFNW: *mut wchar_t,
    pub UILanguageFileW: *mut wchar_t,
    pub reserve_UILanguageFileW_ini: *mut wchar_t,
    pub ExeDirW: *mut wchar_t,
    pub LogDirW: *mut wchar_t,
    pub FileDirW: *mut wchar_t,
    pub LogDefaultPathW: *mut wchar_t,
    pub PluginVTIconInstance: HINSTANCE,
    pub PluginVTIconID: WORD,
    pub TeraTermInstance: HINSTANCE,
    pub WindowCornerDontround: WORD,
    pub DialogFontNameW: [wchar_t; 32usize],
    pub NotifySound: BOOL,
    pub LogDefaultNameW: *mut wchar_t,
    pub Dec2Unicode: BOOL,
    pub DelimListW: *mut wchar_t,
    pub IniAutoBackup: WORD,
    pub BracketedSupport: WORD,
    pub BracketedControlOnly: WORD,
    pub ViewlogEditorW: *mut wchar_t,
    pub ViewlogEditorArg: *mut wchar_t,
    pub BeepVBellWait: ::std::os::raw::c_int,
    pub SendfileDelayType: WORD,
    pub SendfileDelayTick: WORD,
    pub SendfileSize: DWORD,
    pub SendfileSequential: WORD,
    pub SendfileSkipOptionDialog: WORD,
    pub ExperimentalTreePropertySheetEnable: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tttset"][::std::mem::size_of::<tttset>() - 10372usize];
    ["Alignment of tttset"][::std::mem::align_of::<tttset>() - 4usize];
    ["Offset of field: tttset::HomeDir"][::std::mem::offset_of!(tttset, HomeDir) - 0usize];
    ["Offset of field: tttset::SetupFName"][::std::mem::offset_of!(tttset, SetupFName) - 256usize];
    ["Offset of field: tttset::reserve_KeyCnfFN"]
        [::std::mem::offset_of!(tttset, reserve_KeyCnfFN) - 516usize];
    ["Offset of field: tttset::LogFN"][::std::mem::offset_of!(tttset, LogFN) - 776usize];
    ["Offset of field: tttset::reserve_MacroFN"]
        [::std::mem::offset_of!(tttset, reserve_MacroFN) - 1036usize];
    ["Offset of field: tttset::HostName"][::std::mem::offset_of!(tttset, HostName) - 1296usize];
    ["Offset of field: tttset::VTPos"][::std::mem::offset_of!(tttset, VTPos) - 2320usize];
    ["Offset of field: tttset::VTFont"][::std::mem::offset_of!(tttset, VTFont) - 2328usize];
    ["Offset of field: tttset::VTFontSize"][::std::mem::offset_of!(tttset, VTFontSize) - 2360usize];
    ["Offset of field: tttset::VTFontCharSet"]
        [::std::mem::offset_of!(tttset, VTFontCharSet) - 2368usize];
    ["Offset of field: tttset::FontDW"][::std::mem::offset_of!(tttset, FontDW) - 2372usize];
    ["Offset of field: tttset::FontDH"][::std::mem::offset_of!(tttset, FontDH) - 2376usize];
    ["Offset of field: tttset::FontDX"][::std::mem::offset_of!(tttset, FontDX) - 2380usize];
    ["Offset of field: tttset::FontDY"][::std::mem::offset_of!(tttset, FontDY) - 2384usize];
    ["Offset of field: tttset::PrnFont"][::std::mem::offset_of!(tttset, PrnFont) - 2388usize];
    ["Offset of field: tttset::PrnFontSize"]
        [::std::mem::offset_of!(tttset, PrnFontSize) - 2420usize];
    ["Offset of field: tttset::PrnFontCharSet"]
        [::std::mem::offset_of!(tttset, PrnFontCharSet) - 2428usize];
    ["Offset of field: tttset::VTPPI"][::std::mem::offset_of!(tttset, VTPPI) - 2432usize];
    ["Offset of field: tttset::TEKPPI"][::std::mem::offset_of!(tttset, TEKPPI) - 2440usize];
    ["Offset of field: tttset::PrnMargin"][::std::mem::offset_of!(tttset, PrnMargin) - 2448usize];
    ["Offset of field: tttset::PrnDev"][::std::mem::offset_of!(tttset, PrnDev) - 2464usize];
    ["Offset of field: tttset::PassThruDelay"]
        [::std::mem::offset_of!(tttset, PassThruDelay) - 2544usize];
    ["Offset of field: tttset::PrnConvFF"][::std::mem::offset_of!(tttset, PrnConvFF) - 2546usize];
    ["Offset of field: tttset::FontFlag"][::std::mem::offset_of!(tttset, FontFlag) - 2548usize];
    ["Offset of field: tttset::reserve_RussFont"]
        [::std::mem::offset_of!(tttset, reserve_RussFont) - 2550usize];
    ["Offset of field: tttset::ScrollThreshold"]
        [::std::mem::offset_of!(tttset, ScrollThreshold) - 2552usize];
    ["Offset of field: tttset::Debug"][::std::mem::offset_of!(tttset, Debug) - 2556usize];
    ["Offset of field: tttset::LogFlag"][::std::mem::offset_of!(tttset, LogFlag) - 2558usize];
    ["Offset of field: tttset::FTFlag"][::std::mem::offset_of!(tttset, FTFlag) - 2560usize];
    ["Offset of field: tttset::TransBin"][::std::mem::offset_of!(tttset, TransBin) - 2562usize];
    ["Offset of field: tttset::Append"][::std::mem::offset_of!(tttset, Append) - 2564usize];
    ["Offset of field: tttset::XmodemOpt"][::std::mem::offset_of!(tttset, XmodemOpt) - 2566usize];
    ["Offset of field: tttset::XmodemBin"][::std::mem::offset_of!(tttset, XmodemBin) - 2568usize];
    ["Offset of field: tttset::ZmodemDataLen"]
        [::std::mem::offset_of!(tttset, ZmodemDataLen) - 2572usize];
    ["Offset of field: tttset::ZmodemWinSize"]
        [::std::mem::offset_of!(tttset, ZmodemWinSize) - 2576usize];
    ["Offset of field: tttset::QVWinSize"][::std::mem::offset_of!(tttset, QVWinSize) - 2580usize];
    ["Offset of field: tttset::reserve_FileDir"]
        [::std::mem::offset_of!(tttset, reserve_FileDir) - 2584usize];
    ["Offset of field: tttset::FileSendFilter"]
        [::std::mem::offset_of!(tttset, FileSendFilter) - 2840usize];
    ["Offset of field: tttset::reserve_Language"]
        [::std::mem::offset_of!(tttset, reserve_Language) - 2968usize];
    ["Offset of field: tttset::reserver_DelimList"]
        [::std::mem::offset_of!(tttset, reserver_DelimList) - 2970usize];
    ["Offset of field: tttset::DelimDBCS"][::std::mem::offset_of!(tttset, DelimDBCS) - 3022usize];
    ["Offset of field: tttset::Minimize"][::std::mem::offset_of!(tttset, Minimize) - 3024usize];
    ["Offset of field: tttset::HideWindow"][::std::mem::offset_of!(tttset, HideWindow) - 3026usize];
    ["Offset of field: tttset::MenuFlag"][::std::mem::offset_of!(tttset, MenuFlag) - 3028usize];
    ["Offset of field: tttset::SelOnActive"]
        [::std::mem::offset_of!(tttset, SelOnActive) - 3030usize];
    ["Offset of field: tttset::AutoTextCopy"]
        [::std::mem::offset_of!(tttset, AutoTextCopy) - 3032usize];
    ["Offset of field: tttset::TEKPos"][::std::mem::offset_of!(tttset, TEKPos) - 3036usize];
    ["Offset of field: tttset::TEKFont"][::std::mem::offset_of!(tttset, TEKFont) - 3044usize];
    ["Offset of field: tttset::TEKFontSize"]
        [::std::mem::offset_of!(tttset, TEKFontSize) - 3076usize];
    ["Offset of field: tttset::TEKFontCharSet"]
        [::std::mem::offset_of!(tttset, TEKFontCharSet) - 3084usize];
    ["Offset of field: tttset::GINMouseCode"]
        [::std::mem::offset_of!(tttset, GINMouseCode) - 3088usize];
    ["Offset of field: tttset::TerminalWidth"]
        [::std::mem::offset_of!(tttset, TerminalWidth) - 3092usize];
    ["Offset of field: tttset::TerminalHeight"]
        [::std::mem::offset_of!(tttset, TerminalHeight) - 3096usize];
    ["Offset of field: tttset::TermIsWin"][::std::mem::offset_of!(tttset, TermIsWin) - 3100usize];
    ["Offset of field: tttset::AutoWinResize"]
        [::std::mem::offset_of!(tttset, AutoWinResize) - 3102usize];
    ["Offset of field: tttset::CRSend"][::std::mem::offset_of!(tttset, CRSend) - 3104usize];
    ["Offset of field: tttset::CRReceive"][::std::mem::offset_of!(tttset, CRReceive) - 3106usize];
    ["Offset of field: tttset::LocalEcho"][::std::mem::offset_of!(tttset, LocalEcho) - 3108usize];
    ["Offset of field: tttset::Answerback"][::std::mem::offset_of!(tttset, Answerback) - 3110usize];
    ["Offset of field: tttset::AnswerbackLen"]
        [::std::mem::offset_of!(tttset, AnswerbackLen) - 3144usize];
    ["Offset of field: tttset::KanjiCode"][::std::mem::offset_of!(tttset, KanjiCode) - 3148usize];
    ["Offset of field: tttset::KanjiCodeSend"]
        [::std::mem::offset_of!(tttset, KanjiCodeSend) - 3150usize];
    ["Offset of field: tttset::JIS7Katakana"]
        [::std::mem::offset_of!(tttset, JIS7Katakana) - 3152usize];
    ["Offset of field: tttset::JIS7KatakanaSend"]
        [::std::mem::offset_of!(tttset, JIS7KatakanaSend) - 3154usize];
    ["Offset of field: tttset::KanjiIn"][::std::mem::offset_of!(tttset, KanjiIn) - 3156usize];
    ["Offset of field: tttset::KanjiOut"][::std::mem::offset_of!(tttset, KanjiOut) - 3158usize];
    ["Offset of field: tttset::reserve_RussHost"]
        [::std::mem::offset_of!(tttset, reserve_RussHost) - 3160usize];
    ["Offset of field: tttset::reserve_RussClient"]
        [::std::mem::offset_of!(tttset, reserve_RussClient) - 3162usize];
    ["Offset of field: tttset::reserve_RussPrint"]
        [::std::mem::offset_of!(tttset, reserve_RussPrint) - 3164usize];
    ["Offset of field: tttset::AutoWinSwitch"]
        [::std::mem::offset_of!(tttset, AutoWinSwitch) - 3166usize];
    ["Offset of field: tttset::TerminalID"][::std::mem::offset_of!(tttset, TerminalID) - 3168usize];
    ["Offset of field: tttset::TermFlag"][::std::mem::offset_of!(tttset, TermFlag) - 3170usize];
    ["Offset of field: tttset::reserve_VTFlag"]
        [::std::mem::offset_of!(tttset, reserve_VTFlag) - 3172usize];
    ["Offset of field: tttset::SampleFont"][::std::mem::offset_of!(tttset, SampleFont) - 3176usize];
    ["Offset of field: tttset::reserve_TmpColor"]
        [::std::mem::offset_of!(tttset, reserve_TmpColor) - 3180usize];
    ["Offset of field: tttset::Title"][::std::mem::offset_of!(tttset, Title) - 3324usize];
    ["Offset of field: tttset::TitleFormat"]
        [::std::mem::offset_of!(tttset, TitleFormat) - 3374usize];
    ["Offset of field: tttset::CursorShape"]
        [::std::mem::offset_of!(tttset, CursorShape) - 3376usize];
    ["Offset of field: tttset::NonblinkingCursor"]
        [::std::mem::offset_of!(tttset, NonblinkingCursor) - 3378usize];
    ["Offset of field: tttset::EnableScrollBuff"]
        [::std::mem::offset_of!(tttset, EnableScrollBuff) - 3380usize];
    ["Offset of field: tttset::ScrollBuffSize"]
        [::std::mem::offset_of!(tttset, ScrollBuffSize) - 3384usize];
    ["Offset of field: tttset::ScrollBuffMax"]
        [::std::mem::offset_of!(tttset, ScrollBuffMax) - 3388usize];
    ["Offset of field: tttset::HideTitle"][::std::mem::offset_of!(tttset, HideTitle) - 3392usize];
    ["Offset of field: tttset::PopupMenu"][::std::mem::offset_of!(tttset, PopupMenu) - 3394usize];
    ["Offset of field: tttset::ColorFlag"][::std::mem::offset_of!(tttset, ColorFlag) - 3396usize];
    ["Offset of field: tttset::TEKColorEmu"]
        [::std::mem::offset_of!(tttset, TEKColorEmu) - 3400usize];
    ["Offset of field: tttset::VTColor"][::std::mem::offset_of!(tttset, VTColor) - 3404usize];
    ["Offset of field: tttset::TEKColor"][::std::mem::offset_of!(tttset, TEKColor) - 3412usize];
    ["Offset of field: tttset::URLColor"][::std::mem::offset_of!(tttset, URLColor) - 3420usize];
    ["Offset of field: tttset::VTBoldColor"]
        [::std::mem::offset_of!(tttset, VTBoldColor) - 3428usize];
    ["Offset of field: tttset::VTFaintColor"]
        [::std::mem::offset_of!(tttset, VTFaintColor) - 3436usize];
    ["Offset of field: tttset::VTItalicColor"]
        [::std::mem::offset_of!(tttset, VTItalicColor) - 3444usize];
    ["Offset of field: tttset::VTUnderlineColor"]
        [::std::mem::offset_of!(tttset, VTUnderlineColor) - 3452usize];
    ["Offset of field: tttset::VTBlinkColor"]
        [::std::mem::offset_of!(tttset, VTBlinkColor) - 3460usize];
    ["Offset of field: tttset::VTRapidBlinkColor"]
        [::std::mem::offset_of!(tttset, VTRapidBlinkColor) - 3468usize];
    ["Offset of field: tttset::VTReverseColor"]
        [::std::mem::offset_of!(tttset, VTReverseColor) - 3476usize];
    ["Offset of field: tttset::VTInvisibleColor"]
        [::std::mem::offset_of!(tttset, VTInvisibleColor) - 3484usize];
    ["Offset of field: tttset::VTStrikeoutColor"]
        [::std::mem::offset_of!(tttset, VTStrikeoutColor) - 3492usize];
    ["Offset of field: tttset::DummyColor"][::std::mem::offset_of!(tttset, DummyColor) - 3500usize];
    ["Offset of field: tttset::Beep"][::std::mem::offset_of!(tttset, Beep) - 3508usize];
    ["Offset of field: tttset::BSKey"][::std::mem::offset_of!(tttset, BSKey) - 3510usize];
    ["Offset of field: tttset::DelKey"][::std::mem::offset_of!(tttset, DelKey) - 3512usize];
    ["Offset of field: tttset::UseIME"][::std::mem::offset_of!(tttset, UseIME) - 3514usize];
    ["Offset of field: tttset::IMEInline"][::std::mem::offset_of!(tttset, IMEInline) - 3516usize];
    ["Offset of field: tttset::MetaKey"][::std::mem::offset_of!(tttset, MetaKey) - 3518usize];
    ["Offset of field: tttset::RussKeyb"][::std::mem::offset_of!(tttset, RussKeyb) - 3520usize];
    ["Offset of field: tttset::PortType"][::std::mem::offset_of!(tttset, PortType) - 3522usize];
    ["Offset of field: tttset::TCPPort"][::std::mem::offset_of!(tttset, TCPPort) - 3524usize];
    ["Offset of field: tttset::Telnet"][::std::mem::offset_of!(tttset, Telnet) - 3526usize];
    ["Offset of field: tttset::TelPort"][::std::mem::offset_of!(tttset, TelPort) - 3528usize];
    ["Offset of field: tttset::TelBin"][::std::mem::offset_of!(tttset, TelBin) - 3530usize];
    ["Offset of field: tttset::TelEcho"][::std::mem::offset_of!(tttset, TelEcho) - 3532usize];
    ["Offset of field: tttset::TermType"][::std::mem::offset_of!(tttset, TermType) - 3534usize];
    ["Offset of field: tttset::AutoWinClose"]
        [::std::mem::offset_of!(tttset, AutoWinClose) - 3574usize];
    ["Offset of field: tttset::PortFlag"][::std::mem::offset_of!(tttset, PortFlag) - 3576usize];
    ["Offset of field: tttset::TCPCRSend"][::std::mem::offset_of!(tttset, TCPCRSend) - 3578usize];
    ["Offset of field: tttset::TCPLocalEcho"]
        [::std::mem::offset_of!(tttset, TCPLocalEcho) - 3580usize];
    ["Offset of field: tttset::HistoryList"]
        [::std::mem::offset_of!(tttset, HistoryList) - 3582usize];
    ["Offset of field: tttset::ComPort"][::std::mem::offset_of!(tttset, ComPort) - 3584usize];
    ["Offset of field: tttset::Baud_"][::std::mem::offset_of!(tttset, Baud_) - 3586usize];
    ["Offset of field: tttset::Parity"][::std::mem::offset_of!(tttset, Parity) - 3588usize];
    ["Offset of field: tttset::DataBit"][::std::mem::offset_of!(tttset, DataBit) - 3590usize];
    ["Offset of field: tttset::StopBit"][::std::mem::offset_of!(tttset, StopBit) - 3592usize];
    ["Offset of field: tttset::Flow"][::std::mem::offset_of!(tttset, Flow) - 3594usize];
    ["Offset of field: tttset::DelayPerChar"]
        [::std::mem::offset_of!(tttset, DelayPerChar) - 3596usize];
    ["Offset of field: tttset::DelayPerLine"]
        [::std::mem::offset_of!(tttset, DelayPerLine) - 3598usize];
    ["Offset of field: tttset::MaxComPort"][::std::mem::offset_of!(tttset, MaxComPort) - 3600usize];
    ["Offset of field: tttset::ComAutoConnect"]
        [::std::mem::offset_of!(tttset, ComAutoConnect) - 3602usize];
    ["Offset of field: tttset::EnableContinuedLineCopy"]
        [::std::mem::offset_of!(tttset, EnableContinuedLineCopy) - 3604usize];
    ["Offset of field: tttset::ANSIColor"][::std::mem::offset_of!(tttset, ANSIColor) - 3608usize];
    ["Offset of field: tttset::ProtocolFamily"]
        [::std::mem::offset_of!(tttset, ProtocolFamily) - 3672usize];
    ["Offset of field: tttset::MouseCursorName"]
        [::std::mem::offset_of!(tttset, MouseCursorName) - 3676usize];
    ["Offset of field: tttset::AlphaBlendActive"]
        [::std::mem::offset_of!(tttset, AlphaBlendActive) - 3692usize];
    ["Offset of field: tttset::AlphaBlendInactive"]
        [::std::mem::offset_of!(tttset, AlphaBlendInactive) - 3693usize];
    ["Offset of field: tttset::reserve_0"][::std::mem::offset_of!(tttset, reserve_0) - 3694usize];
    ["Offset of field: tttset::CygwinDirectory"]
        [::std::mem::offset_of!(tttset, CygwinDirectory) - 3696usize];
    ["Offset of field: tttset::reserve_Locale"]
        [::std::mem::offset_of!(tttset, reserve_Locale) - 3956usize];
    ["Offset of field: tttset::reserve_CodePage"]
        [::std::mem::offset_of!(tttset, reserve_CodePage) - 4036usize];
    ["Offset of field: tttset::DuplicateSession"]
        [::std::mem::offset_of!(tttset, DuplicateSession) - 4040usize];
    ["Offset of field: tttset::reserve_ViewlogEditor"]
        [::std::mem::offset_of!(tttset, reserve_ViewlogEditor) - 4044usize];
    ["Offset of field: tttset::LogTypePlainText"]
        [::std::mem::offset_of!(tttset, LogTypePlainText) - 4304usize];
    ["Offset of field: tttset::LogTimestamp"]
        [::std::mem::offset_of!(tttset, LogTimestamp) - 4306usize];
    ["Offset of field: tttset::reserve_LogDefaultName"]
        [::std::mem::offset_of!(tttset, reserve_LogDefaultName) - 4308usize];
    ["Offset of field: tttset::reserve_LogDefaultPath"]
        [::std::mem::offset_of!(tttset, reserve_LogDefaultPath) - 4388usize];
    ["Offset of field: tttset::LogAutoStart"]
        [::std::mem::offset_of!(tttset, LogAutoStart) - 4648usize];
    ["Offset of field: tttset::PasteFlag"][::std::mem::offset_of!(tttset, PasteFlag) - 4652usize];
    ["Offset of field: tttset::FallbackToCP932"]
        [::std::mem::offset_of!(tttset, FallbackToCP932) - 4656usize];
    ["Offset of field: tttset::DisableAcceleratorSendBreak"]
        [::std::mem::offset_of!(tttset, DisableAcceleratorSendBreak) - 4658usize];
    ["Offset of field: tttset::EnableClickableUrl"]
        [::std::mem::offset_of!(tttset, EnableClickableUrl) - 4660usize];
    ["Offset of field: tttset::EtermLookfeel"]
        [::std::mem::offset_of!(tttset, EtermLookfeel) - 4664usize];
    ["Offset of field: tttset::UseNormalBGColor"]
        [::std::mem::offset_of!(tttset, UseNormalBGColor) - 5204usize];
    ["Offset of field: tttset::reserve_UILanguageFile"]
        [::std::mem::offset_of!(tttset, reserve_UILanguageFile) - 5206usize];
    ["Offset of field: tttset::reserve_UIMsg"]
        [::std::mem::offset_of!(tttset, reserve_UIMsg) - 5466usize];
    ["Offset of field: tttset::BroadcastCommandHistory"]
        [::std::mem::offset_of!(tttset, BroadcastCommandHistory) - 6490usize];
    ["Offset of field: tttset::AcceptBroadcast"]
        [::std::mem::offset_of!(tttset, AcceptBroadcast) - 6492usize];
    ["Offset of field: tttset::DisableTCPEchoCR"]
        [::std::mem::offset_of!(tttset, DisableTCPEchoCR) - 6494usize];
    ["Offset of field: tttset::ConnectingTimeout"]
        [::std::mem::offset_of!(tttset, ConnectingTimeout) - 6496usize];
    ["Offset of field: tttset::VTCompatTab"]
        [::std::mem::offset_of!(tttset, VTCompatTab) - 6500usize];
    ["Offset of field: tttset::TelKeepAliveInterval"]
        [::std::mem::offset_of!(tttset, TelKeepAliveInterval) - 6502usize];
    ["Offset of field: tttset::MaxBroadcatHistory"]
        [::std::mem::offset_of!(tttset, MaxBroadcatHistory) - 6504usize];
    ["Offset of field: tttset::DisableAppKeypad"]
        [::std::mem::offset_of!(tttset, DisableAppKeypad) - 6506usize];
    ["Offset of field: tttset::DisableAppCursor"]
        [::std::mem::offset_of!(tttset, DisableAppCursor) - 6508usize];
    ["Offset of field: tttset::ClearComBuffOnOpen"]
        [::std::mem::offset_of!(tttset, ClearComBuffOnOpen) - 6510usize];
    ["Offset of field: tttset::Send8BitCtrl"]
        [::std::mem::offset_of!(tttset, Send8BitCtrl) - 6512usize];
    ["Offset of field: tttset::reserve_UILanguageFile_ini"]
        [::std::mem::offset_of!(tttset, reserve_UILanguageFile_ini) - 6514usize];
    ["Offset of field: tttset::SelectOnlyByLButton"]
        [::std::mem::offset_of!(tttset, SelectOnlyByLButton) - 6774usize];
    ["Offset of field: tttset::TelAutoDetect"]
        [::std::mem::offset_of!(tttset, TelAutoDetect) - 6776usize];
    ["Offset of field: tttset::XModemRcvCommand"]
        [::std::mem::offset_of!(tttset, XModemRcvCommand) - 6778usize];
    ["Offset of field: tttset::ZModemRcvCommand"]
        [::std::mem::offset_of!(tttset, ZModemRcvCommand) - 7038usize];
    ["Offset of field: tttset::ConfirmFileDragAndDrop"]
        [::std::mem::offset_of!(tttset, ConfirmFileDragAndDrop) - 7298usize];
    ["Offset of field: tttset::TranslateWheelToCursor"]
        [::std::mem::offset_of!(tttset, TranslateWheelToCursor) - 7300usize];
    ["Offset of field: tttset::HostDialogOnStartup"]
        [::std::mem::offset_of!(tttset, HostDialogOnStartup) - 7302usize];
    ["Offset of field: tttset::MouseEventTracking"]
        [::std::mem::offset_of!(tttset, MouseEventTracking) - 7304usize];
    ["Offset of field: tttset::KillFocusCursor"]
        [::std::mem::offset_of!(tttset, KillFocusCursor) - 7306usize];
    ["Offset of field: tttset::LogHideDialog"]
        [::std::mem::offset_of!(tttset, LogHideDialog) - 7308usize];
    ["Offset of field: tttset::FTHideDialog"]
        [::std::mem::offset_of!(tttset, FTHideDialog) - 7310usize];
    ["Offset of field: tttset::TerminalOldWidth"]
        [::std::mem::offset_of!(tttset, TerminalOldWidth) - 7312usize];
    ["Offset of field: tttset::TerminalOldHeight"]
        [::std::mem::offset_of!(tttset, TerminalOldHeight) - 7316usize];
    ["Offset of field: tttset::MaximizedBugTweak"]
        [::std::mem::offset_of!(tttset, MaximizedBugTweak) - 7320usize];
    ["Offset of field: tttset::NotifyClipboardAccess"]
        [::std::mem::offset_of!(tttset, NotifyClipboardAccess) - 7322usize];
    ["Offset of field: tttset::SaveVTWinPos"]
        [::std::mem::offset_of!(tttset, SaveVTWinPos) - 7324usize];
    ["Offset of field: tttset::LogTimestampType"]
        [::std::mem::offset_of!(tttset, LogTimestampType) - 7326usize];
    ["Offset of field: tttset::MouseWheelScrollLine"]
        [::std::mem::offset_of!(tttset, MouseWheelScrollLine) - 7328usize];
    ["Offset of field: tttset::CRSend_ini"][::std::mem::offset_of!(tttset, CRSend_ini) - 7332usize];
    ["Offset of field: tttset::LocalEcho_ini"]
        [::std::mem::offset_of!(tttset, LocalEcho_ini) - 7334usize];
    ["Offset of field: tttset::UnicodeDecSpMapping"]
        [::std::mem::offset_of!(tttset, UnicodeDecSpMapping) - 7336usize];
    ["Offset of field: tttset::VTIcon"][::std::mem::offset_of!(tttset, VTIcon) - 7338usize];
    ["Offset of field: tttset::TEKIcon"][::std::mem::offset_of!(tttset, TEKIcon) - 7340usize];
    ["Offset of field: tttset::ScrollWindowClearScreen"]
        [::std::mem::offset_of!(tttset, ScrollWindowClearScreen) - 7342usize];
    ["Offset of field: tttset::AutoScrollOnlyInBottomLine"]
        [::std::mem::offset_of!(tttset, AutoScrollOnlyInBottomLine) - 7344usize];
    ["Offset of field: tttset::reserve_UnknownUnicodeCharaAsWide"]
        [::std::mem::offset_of!(tttset, reserve_UnknownUnicodeCharaAsWide) - 7346usize];
    ["Offset of field: tttset::YModemRcvCommand"]
        [::std::mem::offset_of!(tttset, YModemRcvCommand) - 7348usize];
    ["Offset of field: tttset::AcceptTitleChangeRequest"]
        [::std::mem::offset_of!(tttset, AcceptTitleChangeRequest) - 7608usize];
    ["Offset of field: tttset::PasteDialogSize"]
        [::std::mem::offset_of!(tttset, PasteDialogSize) - 7612usize];
    ["Offset of field: tttset::DisableMouseTrackingByCtrl"]
        [::std::mem::offset_of!(tttset, DisableMouseTrackingByCtrl) - 7620usize];
    ["Offset of field: tttset::DisableWheelToCursorByCtrl"]
        [::std::mem::offset_of!(tttset, DisableWheelToCursorByCtrl) - 7622usize];
    ["Offset of field: tttset::StrictKeyMapping"]
        [::std::mem::offset_of!(tttset, StrictKeyMapping) - 7624usize];
    ["Offset of field: tttset::Wait4allMacroCommand"]
        [::std::mem::offset_of!(tttset, Wait4allMacroCommand) - 7626usize];
    ["Offset of field: tttset::DisableMenuSendBreak"]
        [::std::mem::offset_of!(tttset, DisableMenuSendBreak) - 7628usize];
    ["Offset of field: tttset::ClearScreenOnCloseConnection"]
        [::std::mem::offset_of!(tttset, ClearScreenOnCloseConnection) - 7630usize];
    ["Offset of field: tttset::DisableAcceleratorDuplicateSession"]
        [::std::mem::offset_of!(tttset, DisableAcceleratorDuplicateSession) - 7632usize];
    ["Offset of field: tttset::PasteDelayPerLine"]
        [::std::mem::offset_of!(tttset, PasteDelayPerLine) - 7636usize];
    ["Offset of field: tttset::FontScaling"]
        [::std::mem::offset_of!(tttset, FontScaling) - 7640usize];
    ["Offset of field: tttset::Meta8Bit"][::std::mem::offset_of!(tttset, Meta8Bit) - 7642usize];
    ["Offset of field: tttset::WindowFlag"][::std::mem::offset_of!(tttset, WindowFlag) - 7644usize];
    ["Offset of field: tttset::EnableLineMode"]
        [::std::mem::offset_of!(tttset, EnableLineMode) - 7646usize];
    ["Offset of field: tttset::ConfirmChangePasteStringFile"]
        [::std::mem::offset_of!(tttset, ConfirmChangePasteStringFile) - 7648usize];
    ["Offset of field: tttset::Baud"][::std::mem::offset_of!(tttset, Baud) - 7908usize];
    ["Offset of field: tttset::LogBinary"][::std::mem::offset_of!(tttset, LogBinary) - 7912usize];
    ["Offset of field: tttset::DisableMenuDuplicateSession"]
        [::std::mem::offset_of!(tttset, DisableMenuDuplicateSession) - 7914usize];
    ["Offset of field: tttset::DisableMenuNewConnection"]
        [::std::mem::offset_of!(tttset, DisableMenuNewConnection) - 7916usize];
    ["Offset of field: tttset::TerminalUID"]
        [::std::mem::offset_of!(tttset, TerminalUID) - 7918usize];
    ["Offset of field: tttset::ISO2022Flag"]
        [::std::mem::offset_of!(tttset, ISO2022Flag) - 7928usize];
    ["Offset of field: tttset::JumpList"][::std::mem::offset_of!(tttset, JumpList) - 7930usize];
    ["Offset of field: tttset::TabStopFlag"]
        [::std::mem::offset_of!(tttset, TabStopFlag) - 7932usize];
    ["Offset of field: tttset::CtrlFlag"][::std::mem::offset_of!(tttset, CtrlFlag) - 7936usize];
    ["Offset of field: tttset::ClickableUrlBrowser"]
        [::std::mem::offset_of!(tttset, ClickableUrlBrowser) - 7940usize];
    ["Offset of field: tttset::ClickableUrlBrowserArg"]
        [::std::mem::offset_of!(tttset, ClickableUrlBrowserArg) - 8200usize];
    ["Offset of field: tttset::LogLockExclusive"]
        [::std::mem::offset_of!(tttset, LogLockExclusive) - 8460usize];
    ["Offset of field: tttset::KermitOpt"][::std::mem::offset_of!(tttset, KermitOpt) - 8462usize];
    ["Offset of field: tttset::FontQuality"]
        [::std::mem::offset_of!(tttset, FontQuality) - 8464usize];
    ["Offset of field: tttset::ScpSendDir"][::std::mem::offset_of!(tttset, ScpSendDir) - 8466usize];
    ["Offset of field: tttset::reserver_BGImageFilePath"]
        [::std::mem::offset_of!(tttset, reserver_BGImageFilePath) - 8722usize];
    ["Offset of field: tttset::LogRotate"][::std::mem::offset_of!(tttset, LogRotate) - 8984usize];
    ["Offset of field: tttset::LogRotateSize"]
        [::std::mem::offset_of!(tttset, LogRotateSize) - 8988usize];
    ["Offset of field: tttset::LogRotateSizeType"]
        [::std::mem::offset_of!(tttset, LogRotateSizeType) - 8992usize];
    ["Offset of field: tttset::LogRotateStep"]
        [::std::mem::offset_of!(tttset, LogRotateStep) - 8994usize];
    ["Offset of field: tttset::DeferredLogWriteMode"]
        [::std::mem::offset_of!(tttset, DeferredLogWriteMode) - 8996usize];
    ["Offset of field: tttset::BeepOverUsedCount"]
        [::std::mem::offset_of!(tttset, BeepOverUsedCount) - 9000usize];
    ["Offset of field: tttset::BeepOverUsedTime"]
        [::std::mem::offset_of!(tttset, BeepOverUsedTime) - 9004usize];
    ["Offset of field: tttset::BeepSuppressTime"]
        [::std::mem::offset_of!(tttset, BeepSuppressTime) - 9008usize];
    ["Offset of field: tttset::LogAllBuffIncludedInFirst"]
        [::std::mem::offset_of!(tttset, LogAllBuffIncludedInFirst) - 9012usize];
    ["Offset of field: tttset::MaxOSCBufferSize"]
        [::std::mem::offset_of!(tttset, MaxOSCBufferSize) - 9016usize];
    ["Offset of field: tttset::JoinSplitURL"]
        [::std::mem::offset_of!(tttset, JoinSplitURL) - 9020usize];
    ["Offset of field: tttset::JoinSplitURLIgnoreEOLChar"]
        [::std::mem::offset_of!(tttset, JoinSplitURLIgnoreEOLChar) - 9022usize];
    ["Offset of field: tttset::MulticastName"]
        [::std::mem::offset_of!(tttset, MulticastName) - 9023usize];
    ["Offset of field: tttset::DebugModes"][::std::mem::offset_of!(tttset, DebugModes) - 9284usize];
    ["Offset of field: tttset::AcceleratorNewConnection"]
        [::std::mem::offset_of!(tttset, AcceleratorNewConnection) - 9286usize];
    ["Offset of field: tttset::AcceleratorCygwinConnection"]
        [::std::mem::offset_of!(tttset, AcceleratorCygwinConnection) - 9288usize];
    ["Offset of field: tttset::SendBreakTime"]
        [::std::mem::offset_of!(tttset, SendBreakTime) - 9292usize];
    ["Offset of field: tttset::FileSendHighSpeedMode"]
        [::std::mem::offset_of!(tttset, FileSendHighSpeedMode) - 9296usize];
    ["Offset of field: tttset::AutoComPortReconnect"]
        [::std::mem::offset_of!(tttset, AutoComPortReconnect) - 9298usize];
    ["Offset of field: tttset::reserver_BGImgBrightness"]
        [::std::mem::offset_of!(tttset, reserver_BGImgBrightness) - 9300usize];
    ["Offset of field: tttset::reserve_CygtermSettings"]
        [::std::mem::offset_of!(tttset, reserve_CygtermSettings) - 9302usize];
    ["Offset of field: tttset::XmodemTimeOutInit"]
        [::std::mem::offset_of!(tttset, XmodemTimeOutInit) - 10024usize];
    ["Offset of field: tttset::XmodemTimeOutInitCRC"]
        [::std::mem::offset_of!(tttset, XmodemTimeOutInitCRC) - 10028usize];
    ["Offset of field: tttset::XmodemTimeOutShort"]
        [::std::mem::offset_of!(tttset, XmodemTimeOutShort) - 10032usize];
    ["Offset of field: tttset::XmodemTimeOutLong"]
        [::std::mem::offset_of!(tttset, XmodemTimeOutLong) - 10036usize];
    ["Offset of field: tttset::XmodemTimeOutVLong"]
        [::std::mem::offset_of!(tttset, XmodemTimeOutVLong) - 10040usize];
    ["Offset of field: tttset::YmodemTimeOutInit"]
        [::std::mem::offset_of!(tttset, YmodemTimeOutInit) - 10044usize];
    ["Offset of field: tttset::YmodemTimeOutInitCRC"]
        [::std::mem::offset_of!(tttset, YmodemTimeOutInitCRC) - 10048usize];
    ["Offset of field: tttset::YmodemTimeOutShort"]
        [::std::mem::offset_of!(tttset, YmodemTimeOutShort) - 10052usize];
    ["Offset of field: tttset::YmodemTimeOutLong"]
        [::std::mem::offset_of!(tttset, YmodemTimeOutLong) - 10056usize];
    ["Offset of field: tttset::YmodemTimeOutVLong"]
        [::std::mem::offset_of!(tttset, YmodemTimeOutVLong) - 10060usize];
    ["Offset of field: tttset::ZmodemTimeOutNormal"]
        [::std::mem::offset_of!(tttset, ZmodemTimeOutNormal) - 10064usize];
    ["Offset of field: tttset::ZmodemTimeOutTCPIP"]
        [::std::mem::offset_of!(tttset, ZmodemTimeOutTCPIP) - 10068usize];
    ["Offset of field: tttset::ZmodemTimeOutInit"]
        [::std::mem::offset_of!(tttset, ZmodemTimeOutInit) - 10072usize];
    ["Offset of field: tttset::ZmodemTimeOutFin"]
        [::std::mem::offset_of!(tttset, ZmodemTimeOutFin) - 10076usize];
    ["Offset of field: tttset::WaitCom"][::std::mem::offset_of!(tttset, WaitCom) - 10080usize];
    ["Offset of field: tttset::ListHiddenFonts"]
        [::std::mem::offset_of!(tttset, ListHiddenFonts) - 10082usize];
    ["Offset of field: tttset::LogTimestampFormat"]
        [::std::mem::offset_of!(tttset, LogTimestampFormat) - 10084usize];
    ["Offset of field: tttset::TerminalInputSpeed"]
        [::std::mem::offset_of!(tttset, TerminalInputSpeed) - 10132usize];
    ["Offset of field: tttset::TerminalOutputSpeed"]
        [::std::mem::offset_of!(tttset, TerminalOutputSpeed) - 10136usize];
    ["Offset of field: tttset::reserve_DialogFontName"]
        [::std::mem::offset_of!(tttset, reserve_DialogFontName) - 10140usize];
    ["Offset of field: tttset::DialogFontPoint"]
        [::std::mem::offset_of!(tttset, DialogFontPoint) - 10172usize];
    ["Offset of field: tttset::DialogFontCharSet"]
        [::std::mem::offset_of!(tttset, DialogFontCharSet) - 10176usize];
    ["Offset of field: tttset::ConfigVersion"]
        [::std::mem::offset_of!(tttset, ConfigVersion) - 10180usize];
    ["Offset of field: tttset::RunningVersion"]
        [::std::mem::offset_of!(tttset, RunningVersion) - 10184usize];
    ["Offset of field: tttset::SelectStartDelay"]
        [::std::mem::offset_of!(tttset, SelectStartDelay) - 10188usize];
    ["Offset of field: tttset::UnicodeAmbiguousWidth"]
        [::std::mem::offset_of!(tttset, UnicodeAmbiguousWidth) - 10192usize];
    ["Offset of field: tttset::UnicodeEmojiOverride"]
        [::std::mem::offset_of!(tttset, UnicodeEmojiOverride) - 10193usize];
    ["Offset of field: tttset::UnicodeEmojiWidth"]
        [::std::mem::offset_of!(tttset, UnicodeEmojiWidth) - 10194usize];
    ["Offset of field: tttset::HomeDirW"][::std::mem::offset_of!(tttset, HomeDirW) - 10196usize];
    ["Offset of field: tttset::SetupFNameW"]
        [::std::mem::offset_of!(tttset, SetupFNameW) - 10200usize];
    ["Offset of field: tttset::KeyCnfFNW"][::std::mem::offset_of!(tttset, KeyCnfFNW) - 10204usize];
    ["Offset of field: tttset::LogFNW"][::std::mem::offset_of!(tttset, LogFNW) - 10208usize];
    ["Offset of field: tttset::MacroFNW"][::std::mem::offset_of!(tttset, MacroFNW) - 10212usize];
    ["Offset of field: tttset::UILanguageFileW"]
        [::std::mem::offset_of!(tttset, UILanguageFileW) - 10216usize];
    ["Offset of field: tttset::reserve_UILanguageFileW_ini"]
        [::std::mem::offset_of!(tttset, reserve_UILanguageFileW_ini) - 10220usize];
    ["Offset of field: tttset::ExeDirW"][::std::mem::offset_of!(tttset, ExeDirW) - 10224usize];
    ["Offset of field: tttset::LogDirW"][::std::mem::offset_of!(tttset, LogDirW) - 10228usize];
    ["Offset of field: tttset::FileDirW"][::std::mem::offset_of!(tttset, FileDirW) - 10232usize];
    ["Offset of field: tttset::LogDefaultPathW"]
        [::std::mem::offset_of!(tttset, LogDefaultPathW) - 10236usize];
    ["Offset of field: tttset::PluginVTIconInstance"]
        [::std::mem::offset_of!(tttset, PluginVTIconInstance) - 10240usize];
    ["Offset of field: tttset::PluginVTIconID"]
        [::std::mem::offset_of!(tttset, PluginVTIconID) - 10244usize];
    ["Offset of field: tttset::TeraTermInstance"]
        [::std::mem::offset_of!(tttset, TeraTermInstance) - 10248usize];
    ["Offset of field: tttset::WindowCornerDontround"]
        [::std::mem::offset_of!(tttset, WindowCornerDontround) - 10252usize];
    ["Offset of field: tttset::DialogFontNameW"]
        [::std::mem::offset_of!(tttset, DialogFontNameW) - 10254usize];
    ["Offset of field: tttset::NotifySound"]
        [::std::mem::offset_of!(tttset, NotifySound) - 10320usize];
    ["Offset of field: tttset::LogDefaultNameW"]
        [::std::mem::offset_of!(tttset, LogDefaultNameW) - 10324usize];
    ["Offset of field: tttset::Dec2Unicode"]
        [::std::mem::offset_of!(tttset, Dec2Unicode) - 10328usize];
    ["Offset of field: tttset::DelimListW"]
        [::std::mem::offset_of!(tttset, DelimListW) - 10332usize];
    ["Offset of field: tttset::IniAutoBackup"]
        [::std::mem::offset_of!(tttset, IniAutoBackup) - 10336usize];
    ["Offset of field: tttset::BracketedSupport"]
        [::std::mem::offset_of!(tttset, BracketedSupport) - 10338usize];
    ["Offset of field: tttset::BracketedControlOnly"]
        [::std::mem::offset_of!(tttset, BracketedControlOnly) - 10340usize];
    ["Offset of field: tttset::ViewlogEditorW"]
        [::std::mem::offset_of!(tttset, ViewlogEditorW) - 10344usize];
    ["Offset of field: tttset::ViewlogEditorArg"]
        [::std::mem::offset_of!(tttset, ViewlogEditorArg) - 10348usize];
    ["Offset of field: tttset::BeepVBellWait"]
        [::std::mem::offset_of!(tttset, BeepVBellWait) - 10352usize];
    ["Offset of field: tttset::SendfileDelayType"]
        [::std::mem::offset_of!(tttset, SendfileDelayType) - 10356usize];
    ["Offset of field: tttset::SendfileDelayTick"]
        [::std::mem::offset_of!(tttset, SendfileDelayTick) - 10358usize];
    ["Offset of field: tttset::SendfileSize"]
        [::std::mem::offset_of!(tttset, SendfileSize) - 10360usize];
    ["Offset of field: tttset::SendfileSequential"]
        [::std::mem::offset_of!(tttset, SendfileSequential) - 10364usize];
    ["Offset of field: tttset::SendfileSkipOptionDialog"]
        [::std::mem::offset_of!(tttset, SendfileSkipOptionDialog) - 10366usize];
    ["Offset of field: tttset::ExperimentalTreePropertySheetEnable"]
        [::std::mem::offset_of!(tttset, ExperimentalTreePropertySheetEnable) - 10368usize];
};
#[doc = "\tTTTSet\n\t\t�Z�b�V�����\u{315}�����\n\t\t���\u{30d}\\���\u{302}\u{355}�����ɃR�s�[�����\n\t\tpath���A���I�Ɋm�ۂ��������\u{303}R�s�[��\n\t\t../ttcmn_dup.cpp ���Q��"]
pub type TTTSet = tttset;
pub type PTTSet = *mut tttset;
#[repr(C)]
pub struct TComVar {
    pub InBuff: [BYTE; 1024usize],
    pub InBuffCount: ::std::os::raw::c_int,
    pub InPtr: ::std::os::raw::c_int,
    pub OutBuff: [BYTE; 16384usize],
    pub OutBuffCount: ::std::os::raw::c_int,
    pub OutPtr: ::std::os::raw::c_int,
    pub HWin: HWND,
    pub Ready: BOOL,
    pub Open: BOOL,
    pub PortType: WORD,
    pub ComPort: WORD,
    pub s: UINT_PTR,
    pub RetryCount: WORD,
    pub ComID: HANDLE,
    pub CanSend: BOOL,
    pub RRQ: BOOL,
    pub reserve_SendKanjiFlag: BOOL,
    pub reserve_EchoKanjiFlag: BOOL,
    pub reserve_SendCode: ::std::os::raw::c_int,
    pub reserve_EchoCode: ::std::os::raw::c_int,
    pub reserve_SendKanjiFirst: BYTE,
    pub reserve_EchoKanjiFirst: BYTE,
    pub reserve_Language: WORD,
    pub CRSend: WORD,
    pub KanjiCodeEcho: WORD,
    pub reserve_JIS7KatakanaEcho: WORD,
    pub KanjiCodeSend: WORD,
    pub reserve_JIS7KatakanaSend: WORD,
    pub reserve_KanjiIn: WORD,
    pub reserve_KanjiOut: WORD,
    pub reserve_RussHost: WORD,
    pub reserve_RussClient: WORD,
    pub DelayPerChar: WORD,
    pub DelayPerLine: WORD,
    pub TelBinRecv: BOOL,
    pub TelBinSend: BOOL,
    pub DelayFlag: BOOL,
    pub TelFlag: BOOL,
    pub TelMode: BOOL,
    pub IACFlag: BOOL,
    pub TelCRFlag: BOOL,
    pub TelCRSend: BOOL,
    pub TelCRSendEcho: BOOL,
    pub TelAutoDetect: BOOL,
    pub reserve_2: HANDLE,
    pub reserve_4: PCHAR,
    pub reserve_5: [::std::os::raw::c_int; 3usize],
    pub reserve_3: HANDLE,
    pub reserve_6: PCHAR,
    pub reserve_7: [::std::os::raw::c_int; 3usize],
    pub reserve_1: [::std::os::raw::c_int; 2usize],
    pub reserve_8: ::std::os::raw::c_int,
    pub reserve_9: WORD,
    pub reserve_10: BOOL,
    pub NoMsg: WORD,
    pub RetryWithOtherProtocol: BOOL,
    pub res0: *mut addrinfo,
    pub res: *mut addrinfo,
    pub reserve_11: *mut ::std::os::raw::c_char,
    pub reserve_CodePage: *mut ::std::os::raw::c_int,
    pub ConnetingTimeout: *mut ::std::os::raw::c_int,
    pub LastSendTime: time_t,
    pub isSSH: WORD,
    pub reserve_TitleRemote: [::std::os::raw::c_char; 50usize],
    pub LineModeBuff: [BYTE; 16384usize],
    pub LineModeBuffCount: ::std::os::raw::c_int,
    pub FlushLen: ::std::os::raw::c_int,
    pub Flush: BOOL,
    pub TelLineMode: BOOL,
    pub reserve_12: *mut ::std::os::raw::c_void,
    pub reserve_13: BOOL,
    pub NotifyIcon: *mut ::std::os::raw::c_void,
    pub ConnectedTime: DWORD,
    pub Log1Byte: ::std::option::Option<unsafe extern "C" fn(b: BYTE)>,
    pub Log1Bin: ::std::option::Option<unsafe extern "C" fn(b: BYTE)>,
    pub LogBinSkip: ::std::option::Option<unsafe extern "C" fn(add: ::std::os::raw::c_int)>,
    pub ts: *mut TTTSet,
    pub TitleRemoteW: *mut wchar_t,
    pub StateSend: *mut ::std::os::raw::c_void,
    pub StateEcho: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TComVar"][::std::mem::size_of::<TComVar>() - 34136usize];
    ["Alignment of TComVar"][::std::mem::align_of::<TComVar>() - 8usize];
    ["Offset of field: TComVar::InBuff"][::std::mem::offset_of!(TComVar, InBuff) - 0usize];
    ["Offset of field: TComVar::InBuffCount"]
        [::std::mem::offset_of!(TComVar, InBuffCount) - 1024usize];
    ["Offset of field: TComVar::InPtr"][::std::mem::offset_of!(TComVar, InPtr) - 1028usize];
    ["Offset of field: TComVar::OutBuff"][::std::mem::offset_of!(TComVar, OutBuff) - 1032usize];
    ["Offset of field: TComVar::OutBuffCount"]
        [::std::mem::offset_of!(TComVar, OutBuffCount) - 17416usize];
    ["Offset of field: TComVar::OutPtr"][::std::mem::offset_of!(TComVar, OutPtr) - 17420usize];
    ["Offset of field: TComVar::HWin"][::std::mem::offset_of!(TComVar, HWin) - 17424usize];
    ["Offset of field: TComVar::Ready"][::std::mem::offset_of!(TComVar, Ready) - 17428usize];
    ["Offset of field: TComVar::Open"][::std::mem::offset_of!(TComVar, Open) - 17432usize];
    ["Offset of field: TComVar::PortType"][::std::mem::offset_of!(TComVar, PortType) - 17436usize];
    ["Offset of field: TComVar::ComPort"][::std::mem::offset_of!(TComVar, ComPort) - 17438usize];
    ["Offset of field: TComVar::s"][::std::mem::offset_of!(TComVar, s) - 17440usize];
    ["Offset of field: TComVar::RetryCount"]
        [::std::mem::offset_of!(TComVar, RetryCount) - 17444usize];
    ["Offset of field: TComVar::ComID"][::std::mem::offset_of!(TComVar, ComID) - 17448usize];
    ["Offset of field: TComVar::CanSend"][::std::mem::offset_of!(TComVar, CanSend) - 17452usize];
    ["Offset of field: TComVar::RRQ"][::std::mem::offset_of!(TComVar, RRQ) - 17456usize];
    ["Offset of field: TComVar::reserve_SendKanjiFlag"]
        [::std::mem::offset_of!(TComVar, reserve_SendKanjiFlag) - 17460usize];
    ["Offset of field: TComVar::reserve_EchoKanjiFlag"]
        [::std::mem::offset_of!(TComVar, reserve_EchoKanjiFlag) - 17464usize];
    ["Offset of field: TComVar::reserve_SendCode"]
        [::std::mem::offset_of!(TComVar, reserve_SendCode) - 17468usize];
    ["Offset of field: TComVar::reserve_EchoCode"]
        [::std::mem::offset_of!(TComVar, reserve_EchoCode) - 17472usize];
    ["Offset of field: TComVar::reserve_SendKanjiFirst"]
        [::std::mem::offset_of!(TComVar, reserve_SendKanjiFirst) - 17476usize];
    ["Offset of field: TComVar::reserve_EchoKanjiFirst"]
        [::std::mem::offset_of!(TComVar, reserve_EchoKanjiFirst) - 17477usize];
    ["Offset of field: TComVar::reserve_Language"]
        [::std::mem::offset_of!(TComVar, reserve_Language) - 17478usize];
    ["Offset of field: TComVar::CRSend"][::std::mem::offset_of!(TComVar, CRSend) - 17480usize];
    ["Offset of field: TComVar::KanjiCodeEcho"]
        [::std::mem::offset_of!(TComVar, KanjiCodeEcho) - 17482usize];
    ["Offset of field: TComVar::reserve_JIS7KatakanaEcho"]
        [::std::mem::offset_of!(TComVar, reserve_JIS7KatakanaEcho) - 17484usize];
    ["Offset of field: TComVar::KanjiCodeSend"]
        [::std::mem::offset_of!(TComVar, KanjiCodeSend) - 17486usize];
    ["Offset of field: TComVar::reserve_JIS7KatakanaSend"]
        [::std::mem::offset_of!(TComVar, reserve_JIS7KatakanaSend) - 17488usize];
    ["Offset of field: TComVar::reserve_KanjiIn"]
        [::std::mem::offset_of!(TComVar, reserve_KanjiIn) - 17490usize];
    ["Offset of field: TComVar::reserve_KanjiOut"]
        [::std::mem::offset_of!(TComVar, reserve_KanjiOut) - 17492usize];
    ["Offset of field: TComVar::reserve_RussHost"]
        [::std::mem::offset_of!(TComVar, reserve_RussHost) - 17494usize];
    ["Offset of field: TComVar::reserve_RussClient"]
        [::std::mem::offset_of!(TComVar, reserve_RussClient) - 17496usize];
    ["Offset of field: TComVar::DelayPerChar"]
        [::std::mem::offset_of!(TComVar, DelayPerChar) - 17498usize];
    ["Offset of field: TComVar::DelayPerLine"]
        [::std::mem::offset_of!(TComVar, DelayPerLine) - 17500usize];
    ["Offset of field: TComVar::TelBinRecv"]
        [::std::mem::offset_of!(TComVar, TelBinRecv) - 17504usize];
    ["Offset of field: TComVar::TelBinSend"]
        [::std::mem::offset_of!(TComVar, TelBinSend) - 17508usize];
    ["Offset of field: TComVar::DelayFlag"]
        [::std::mem::offset_of!(TComVar, DelayFlag) - 17512usize];
    ["Offset of field: TComVar::TelFlag"][::std::mem::offset_of!(TComVar, TelFlag) - 17516usize];
    ["Offset of field: TComVar::TelMode"][::std::mem::offset_of!(TComVar, TelMode) - 17520usize];
    ["Offset of field: TComVar::IACFlag"][::std::mem::offset_of!(TComVar, IACFlag) - 17524usize];
    ["Offset of field: TComVar::TelCRFlag"]
        [::std::mem::offset_of!(TComVar, TelCRFlag) - 17528usize];
    ["Offset of field: TComVar::TelCRSend"]
        [::std::mem::offset_of!(TComVar, TelCRSend) - 17532usize];
    ["Offset of field: TComVar::TelCRSendEcho"]
        [::std::mem::offset_of!(TComVar, TelCRSendEcho) - 17536usize];
    ["Offset of field: TComVar::TelAutoDetect"]
        [::std::mem::offset_of!(TComVar, TelAutoDetect) - 17540usize];
    ["Offset of field: TComVar::reserve_2"]
        [::std::mem::offset_of!(TComVar, reserve_2) - 17544usize];
    ["Offset of field: TComVar::reserve_4"]
        [::std::mem::offset_of!(TComVar, reserve_4) - 17548usize];
    ["Offset of field: TComVar::reserve_5"]
        [::std::mem::offset_of!(TComVar, reserve_5) - 17552usize];
    ["Offset of field: TComVar::reserve_3"]
        [::std::mem::offset_of!(TComVar, reserve_3) - 17564usize];
    ["Offset of field: TComVar::reserve_6"]
        [::std::mem::offset_of!(TComVar, reserve_6) - 17568usize];
    ["Offset of field: TComVar::reserve_7"]
        [::std::mem::offset_of!(TComVar, reserve_7) - 17572usize];
    ["Offset of field: TComVar::reserve_1"]
        [::std::mem::offset_of!(TComVar, reserve_1) - 17584usize];
    ["Offset of field: TComVar::reserve_8"]
        [::std::mem::offset_of!(TComVar, reserve_8) - 17592usize];
    ["Offset of field: TComVar::reserve_9"]
        [::std::mem::offset_of!(TComVar, reserve_9) - 17596usize];
    ["Offset of field: TComVar::reserve_10"]
        [::std::mem::offset_of!(TComVar, reserve_10) - 17600usize];
    ["Offset of field: TComVar::NoMsg"][::std::mem::offset_of!(TComVar, NoMsg) - 17604usize];
    ["Offset of field: TComVar::RetryWithOtherProtocol"]
        [::std::mem::offset_of!(TComVar, RetryWithOtherProtocol) - 17608usize];
    ["Offset of field: TComVar::res0"][::std::mem::offset_of!(TComVar, res0) - 17612usize];
    ["Offset of field: TComVar::res"][::std::mem::offset_of!(TComVar, res) - 17616usize];
    ["Offset of field: TComVar::reserve_11"]
        [::std::mem::offset_of!(TComVar, reserve_11) - 17620usize];
    ["Offset of field: TComVar::reserve_CodePage"]
        [::std::mem::offset_of!(TComVar, reserve_CodePage) - 17624usize];
    ["Offset of field: TComVar::ConnetingTimeout"]
        [::std::mem::offset_of!(TComVar, ConnetingTimeout) - 17628usize];
    ["Offset of field: TComVar::LastSendTime"]
        [::std::mem::offset_of!(TComVar, LastSendTime) - 17632usize];
    ["Offset of field: TComVar::isSSH"][::std::mem::offset_of!(TComVar, isSSH) - 17640usize];
    ["Offset of field: TComVar::reserve_TitleRemote"]
        [::std::mem::offset_of!(TComVar, reserve_TitleRemote) - 17642usize];
    ["Offset of field: TComVar::LineModeBuff"]
        [::std::mem::offset_of!(TComVar, LineModeBuff) - 17692usize];
    ["Offset of field: TComVar::LineModeBuffCount"]
        [::std::mem::offset_of!(TComVar, LineModeBuffCount) - 34076usize];
    ["Offset of field: TComVar::FlushLen"][::std::mem::offset_of!(TComVar, FlushLen) - 34080usize];
    ["Offset of field: TComVar::Flush"][::std::mem::offset_of!(TComVar, Flush) - 34084usize];
    ["Offset of field: TComVar::TelLineMode"]
        [::std::mem::offset_of!(TComVar, TelLineMode) - 34088usize];
    ["Offset of field: TComVar::reserve_12"]
        [::std::mem::offset_of!(TComVar, reserve_12) - 34092usize];
    ["Offset of field: TComVar::reserve_13"]
        [::std::mem::offset_of!(TComVar, reserve_13) - 34096usize];
    ["Offset of field: TComVar::NotifyIcon"]
        [::std::mem::offset_of!(TComVar, NotifyIcon) - 34100usize];
    ["Offset of field: TComVar::ConnectedTime"]
        [::std::mem::offset_of!(TComVar, ConnectedTime) - 34104usize];
    ["Offset of field: TComVar::Log1Byte"][::std::mem::offset_of!(TComVar, Log1Byte) - 34108usize];
    ["Offset of field: TComVar::Log1Bin"][::std::mem::offset_of!(TComVar, Log1Bin) - 34112usize];
    ["Offset of field: TComVar::LogBinSkip"]
        [::std::mem::offset_of!(TComVar, LogBinSkip) - 34116usize];
    ["Offset of field: TComVar::ts"][::std::mem::offset_of!(TComVar, ts) - 34120usize];
    ["Offset of field: TComVar::TitleRemoteW"]
        [::std::mem::offset_of!(TComVar, TitleRemoteW) - 34124usize];
    ["Offset of field: TComVar::StateSend"]
        [::std::mem::offset_of!(TComVar, StateSend) - 34128usize];
    ["Offset of field: TComVar::StateEcho"]
        [::std::mem::offset_of!(TComVar, StateEcho) - 34132usize];
};
pub type PComVar = *mut TComVar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TGetHNRec {
    pub SetupFN: PCHAR,
    pub SetupFNW: *const wchar_t,
    pub PortType: WORD,
    pub HostName: *mut wchar_t,
    pub Telnet: WORD,
    pub TelPort: WORD,
    pub TCPPort: WORD,
    pub ProtocolFamily: WORD,
    pub ComPort: WORD,
    pub MaxComPort: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TGetHNRec"][::std::mem::size_of::<TGetHNRec>() - 28usize];
    ["Alignment of TGetHNRec"][::std::mem::align_of::<TGetHNRec>() - 4usize];
    ["Offset of field: TGetHNRec::SetupFN"][::std::mem::offset_of!(TGetHNRec, SetupFN) - 0usize];
    ["Offset of field: TGetHNRec::SetupFNW"][::std::mem::offset_of!(TGetHNRec, SetupFNW) - 4usize];
    ["Offset of field: TGetHNRec::PortType"][::std::mem::offset_of!(TGetHNRec, PortType) - 8usize];
    ["Offset of field: TGetHNRec::HostName"][::std::mem::offset_of!(TGetHNRec, HostName) - 12usize];
    ["Offset of field: TGetHNRec::Telnet"][::std::mem::offset_of!(TGetHNRec, Telnet) - 16usize];
    ["Offset of field: TGetHNRec::TelPort"][::std::mem::offset_of!(TGetHNRec, TelPort) - 18usize];
    ["Offset of field: TGetHNRec::TCPPort"][::std::mem::offset_of!(TGetHNRec, TCPPort) - 20usize];
    ["Offset of field: TGetHNRec::ProtocolFamily"]
        [::std::mem::offset_of!(TGetHNRec, ProtocolFamily) - 22usize];
    ["Offset of field: TGetHNRec::ComPort"][::std::mem::offset_of!(TGetHNRec, ComPort) - 24usize];
    ["Offset of field: TGetHNRec::MaxComPort"]
        [::std::mem::offset_of!(TGetHNRec, MaxComPort) - 26usize];
};
pub type PGetHNRec = *mut TGetHNRec;
pub type PSetupTerminal =
    ::std::option::Option<unsafe extern "stdcall" fn(WndParent: HWND, ts: PTTSet) -> BOOL>;
pub type PSetupWin =
    ::std::option::Option<unsafe extern "stdcall" fn(WndParent: HWND, ts: PTTSet) -> BOOL>;
pub type PSetupKeyboard =
    ::std::option::Option<unsafe extern "stdcall" fn(WndParent: HWND, ts: PTTSet) -> BOOL>;
pub type PSetupSerialPort =
    ::std::option::Option<unsafe extern "stdcall" fn(WndParent: HWND, ts: PTTSet) -> BOOL>;
pub type PSetupTCPIP =
    ::std::option::Option<unsafe extern "stdcall" fn(WndParent: HWND, ts: PTTSet) -> BOOL>;
pub type PGetHostName =
    ::std::option::Option<unsafe extern "stdcall" fn(WndParent: HWND, GetHNRec: PGetHNRec) -> BOOL>;
pub type PChangeDirectory =
    ::std::option::Option<unsafe extern "stdcall" fn(WndParent: HWND, ts: PTTSet) -> BOOL>;
pub type PAboutDialog = ::std::option::Option<unsafe extern "stdcall" fn(WndParent: HWND) -> BOOL>;
pub type PChooseFontDlg = ::std::option::Option<
    unsafe extern "stdcall" fn(WndParent: HWND, LogFont: LPLOGFONT, ts: PTTSet) -> BOOL,
>;
pub type PSetupGeneral =
    ::std::option::Option<unsafe extern "stdcall" fn(WndParent: HWND, ts: PTTSet) -> BOOL>;
pub type PWindowWindow =
    ::std::option::Option<unsafe extern "stdcall" fn(WndParent: HWND, Close: PBOOL) -> BOOL>;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ADDRESS_FAMILY = USHORT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: ADDRESS_FAMILY,
    pub sa_data: [CHAR; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr"][::std::mem::size_of::<sockaddr>() - 16usize];
    ["Alignment of sockaddr"][::std::mem::align_of::<sockaddr>() - 2usize];
    ["Offset of field: sockaddr::sa_family"][::std::mem::offset_of!(sockaddr, sa_family) - 0usize];
    ["Offset of field: sockaddr::sa_data"][::std::mem::offset_of!(sockaddr, sa_data) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: usize,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_addr: *mut sockaddr,
    pub ai_next: *mut addrinfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfo"][::std::mem::size_of::<addrinfo>() - 32usize];
    ["Alignment of addrinfo"][::std::mem::align_of::<addrinfo>() - 4usize];
    ["Offset of field: addrinfo::ai_flags"][::std::mem::offset_of!(addrinfo, ai_flags) - 0usize];
    ["Offset of field: addrinfo::ai_family"][::std::mem::offset_of!(addrinfo, ai_family) - 4usize];
    ["Offset of field: addrinfo::ai_socktype"]
        [::std::mem::offset_of!(addrinfo, ai_socktype) - 8usize];
    ["Offset of field: addrinfo::ai_protocol"]
        [::std::mem::offset_of!(addrinfo, ai_protocol) - 12usize];
    ["Offset of field: addrinfo::ai_addrlen"]
        [::std::mem::offset_of!(addrinfo, ai_addrlen) - 16usize];
    ["Offset of field: addrinfo::ai_canonname"]
        [::std::mem::offset_of!(addrinfo, ai_canonname) - 20usize];
    ["Offset of field: addrinfo::ai_addr"][::std::mem::offset_of!(addrinfo, ai_addr) - 24usize];
    ["Offset of field: addrinfo::ai_next"][::std::mem::offset_of!(addrinfo, ai_next) - 28usize];
};
pub type SOCKET = UINT_PTR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fd_count: u_int,
    pub fd_array: [SOCKET; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 260usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 4usize];
    ["Offset of field: fd_set::fd_count"][::std::mem::offset_of!(fd_set, fd_count) - 0usize];
    ["Offset of field: fd_set::fd_array"][::std::mem::offset_of!(fd_set, fd_array) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: ::std::os::raw::c_long,
    pub tv_usec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 8usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 4usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 4usize];
};
pub type Tclosesocket =
    ::std::option::Option<unsafe extern "stdcall" fn(s: SOCKET) -> ::std::os::raw::c_int>;
pub type Tconnect = ::std::option::Option<
    unsafe extern "stdcall" fn(
        s: SOCKET,
        name: *const sockaddr,
        namelen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Thtonl = ::std::option::Option<unsafe extern "stdcall" fn(hostlong: u_long) -> u_long>;
pub type Thtons = ::std::option::Option<unsafe extern "stdcall" fn(hostshort: u_short) -> u_short>;
pub type Tinet_addr = ::std::option::Option<
    unsafe extern "stdcall" fn(cp: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong,
>;
pub type Tioctlsocket = ::std::option::Option<
    unsafe extern "stdcall" fn(
        s: SOCKET,
        cmd: ::std::os::raw::c_long,
        argp: *mut u_long,
    ) -> ::std::os::raw::c_int,
>;
pub type Trecv = ::std::option::Option<
    unsafe extern "stdcall" fn(
        s: SOCKET,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Tselect = ::std::option::Option<
    unsafe extern "stdcall" fn(
        nfds: ::std::os::raw::c_int,
        readfds: *mut fd_set,
        writefds: *mut fd_set,
        exceptfds: *mut fd_set,
        timeout: *const timeval,
    ) -> ::std::os::raw::c_int,
>;
pub type Tsend = ::std::option::Option<
    unsafe extern "stdcall" fn(
        s: SOCKET,
        buf: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Tsetsockopt = ::std::option::Option<
    unsafe extern "stdcall" fn(
        s: SOCKET,
        level: ::std::os::raw::c_int,
        optname: ::std::os::raw::c_int,
        optval: *const ::std::os::raw::c_char,
        optlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Tsocket = ::std::option::Option<
    unsafe extern "stdcall" fn(
        af: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
    ) -> SOCKET,
>;
pub type TWSAAsyncSelect = ::std::option::Option<
    unsafe extern "stdcall" fn(
        s: SOCKET,
        hWnd: HWND,
        wMsg: u_int,
        lEvent: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int,
>;
pub type TWSAAsyncGetHostByName = ::std::option::Option<
    unsafe extern "stdcall" fn(
        hWnd: HWND,
        wMsg: u_int,
        name: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buflen: ::std::os::raw::c_int,
    ) -> HANDLE,
>;
pub type TWSACancelAsyncRequest = ::std::option::Option<
    unsafe extern "stdcall" fn(hAsyncTaskHandle: HANDLE) -> ::std::os::raw::c_int,
>;
pub type TWSAGetLastError =
    ::std::option::Option<unsafe extern "stdcall" fn() -> ::std::os::raw::c_int>;
pub type TWSAAsyncGetAddrInfo = ::std::option::Option<
    unsafe extern "stdcall" fn(
        hWnd: HWND,
        wMsg: ::std::os::raw::c_uint,
        hostname: *const ::std::os::raw::c_char,
        portname: *const ::std::os::raw::c_char,
        hints: *mut addrinfo,
        res: *mut *mut addrinfo,
    ) -> HANDLE,
>;
pub type Tfreeaddrinfo = ::std::option::Option<unsafe extern "stdcall" fn(ai: *mut addrinfo)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TKeyMap_st {
    _unused: [u8; 0],
}
pub type PKeyMap = *mut TKeyMap_st;
pub type PReadIniFile =
    ::std::option::Option<unsafe extern "stdcall" fn(FName: *const wchar_t, ts: PTTSet)>;
pub type PWriteIniFile =
    ::std::option::Option<unsafe extern "stdcall" fn(FName: *const wchar_t, ts: PTTSet)>;
pub type PReadKeyboardCnf = ::std::option::Option<
    unsafe extern "stdcall" fn(FName: *const wchar_t, KeyMap: PKeyMap, ShowWarning: BOOL),
>;
pub type PCopyHostList = ::std::option::Option<
    unsafe extern "stdcall" fn(IniSrc: *const wchar_t, IniDest: *const wchar_t),
>;
pub type PAddHostToList =
    ::std::option::Option<unsafe extern "stdcall" fn(FName: *const wchar_t, Host: *const wchar_t)>;
pub type PParseParam = ::std::option::Option<
    unsafe extern "stdcall" fn(Param: *mut wchar_t, ts: PTTSet, DDETopic: PCHAR),
>;
pub type TReadFile = ::std::option::Option<
    unsafe extern "stdcall" fn(
        FHandle: HANDLE,
        Buff: LPVOID,
        ReadSize: DWORD,
        ReadBytes: LPDWORD,
        ReadOverLap: LPOVERLAPPED,
    ) -> BOOL,
>;
pub type TWriteFile = ::std::option::Option<
    unsafe extern "stdcall" fn(
        FHandle: HANDLE,
        Buff: LPCVOID,
        WriteSize: DWORD,
        WriteBytes: LPDWORD,
        WriteOverLap: LPOVERLAPPED,
    ) -> BOOL,
>;
pub type TCreateFile = ::std::option::Option<
    unsafe extern "stdcall" fn(
        FName: LPCSTR,
        AcMode: DWORD,
        ShMode: DWORD,
        SecAttr: LPSECURITY_ATTRIBUTES,
        CreateDisposition: DWORD,
        FileAttr: DWORD,
        Template: HANDLE,
    ) -> HANDLE,
>;
pub type TCloseFile = ::std::option::Option<unsafe extern "stdcall" fn(FHandle: HANDLE) -> BOOL>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TTXSockHooks {
    pub Pclosesocket: *mut Tclosesocket,
    pub Pconnect: *mut Tconnect,
    pub Phtonl: *mut Thtonl,
    pub Phtons: *mut Thtons,
    pub Pinet_addr: *mut Tinet_addr,
    pub Pioctlsocket: *mut Tioctlsocket,
    pub Precv: *mut Trecv,
    pub Pselect: *mut Tselect,
    pub Psend: *mut Tsend,
    pub Psetsockopt: *mut Tsetsockopt,
    pub Psocket: *mut Tsocket,
    pub PWSAAsyncSelect: *mut TWSAAsyncSelect,
    pub PWSAAsyncGetHostByName: *mut TWSAAsyncGetHostByName,
    pub PWSACancelAsyncRequest: *mut TWSACancelAsyncRequest,
    pub PWSAGetLastError: *mut TWSAGetLastError,
    pub Pfreeaddrinfo: *mut Tfreeaddrinfo,
    pub PWSAAsyncGetAddrInfo: *mut TWSAAsyncGetAddrInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TTXSockHooks"][::std::mem::size_of::<TTXSockHooks>() - 68usize];
    ["Alignment of TTXSockHooks"][::std::mem::align_of::<TTXSockHooks>() - 4usize];
    ["Offset of field: TTXSockHooks::Pclosesocket"]
        [::std::mem::offset_of!(TTXSockHooks, Pclosesocket) - 0usize];
    ["Offset of field: TTXSockHooks::Pconnect"]
        [::std::mem::offset_of!(TTXSockHooks, Pconnect) - 4usize];
    ["Offset of field: TTXSockHooks::Phtonl"]
        [::std::mem::offset_of!(TTXSockHooks, Phtonl) - 8usize];
    ["Offset of field: TTXSockHooks::Phtons"]
        [::std::mem::offset_of!(TTXSockHooks, Phtons) - 12usize];
    ["Offset of field: TTXSockHooks::Pinet_addr"]
        [::std::mem::offset_of!(TTXSockHooks, Pinet_addr) - 16usize];
    ["Offset of field: TTXSockHooks::Pioctlsocket"]
        [::std::mem::offset_of!(TTXSockHooks, Pioctlsocket) - 20usize];
    ["Offset of field: TTXSockHooks::Precv"][::std::mem::offset_of!(TTXSockHooks, Precv) - 24usize];
    ["Offset of field: TTXSockHooks::Pselect"]
        [::std::mem::offset_of!(TTXSockHooks, Pselect) - 28usize];
    ["Offset of field: TTXSockHooks::Psend"][::std::mem::offset_of!(TTXSockHooks, Psend) - 32usize];
    ["Offset of field: TTXSockHooks::Psetsockopt"]
        [::std::mem::offset_of!(TTXSockHooks, Psetsockopt) - 36usize];
    ["Offset of field: TTXSockHooks::Psocket"]
        [::std::mem::offset_of!(TTXSockHooks, Psocket) - 40usize];
    ["Offset of field: TTXSockHooks::PWSAAsyncSelect"]
        [::std::mem::offset_of!(TTXSockHooks, PWSAAsyncSelect) - 44usize];
    ["Offset of field: TTXSockHooks::PWSAAsyncGetHostByName"]
        [::std::mem::offset_of!(TTXSockHooks, PWSAAsyncGetHostByName) - 48usize];
    ["Offset of field: TTXSockHooks::PWSACancelAsyncRequest"]
        [::std::mem::offset_of!(TTXSockHooks, PWSACancelAsyncRequest) - 52usize];
    ["Offset of field: TTXSockHooks::PWSAGetLastError"]
        [::std::mem::offset_of!(TTXSockHooks, PWSAGetLastError) - 56usize];
    ["Offset of field: TTXSockHooks::Pfreeaddrinfo"]
        [::std::mem::offset_of!(TTXSockHooks, Pfreeaddrinfo) - 60usize];
    ["Offset of field: TTXSockHooks::PWSAAsyncGetAddrInfo"]
        [::std::mem::offset_of!(TTXSockHooks, PWSAAsyncGetAddrInfo) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TTXFileHooks {
    pub PCreateFile: *mut TCreateFile,
    pub PCloseFile: *mut TCloseFile,
    pub PReadFile: *mut TReadFile,
    pub PWriteFile: *mut TWriteFile,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TTXFileHooks"][::std::mem::size_of::<TTXFileHooks>() - 16usize];
    ["Alignment of TTXFileHooks"][::std::mem::align_of::<TTXFileHooks>() - 4usize];
    ["Offset of field: TTXFileHooks::PCreateFile"]
        [::std::mem::offset_of!(TTXFileHooks, PCreateFile) - 0usize];
    ["Offset of field: TTXFileHooks::PCloseFile"]
        [::std::mem::offset_of!(TTXFileHooks, PCloseFile) - 4usize];
    ["Offset of field: TTXFileHooks::PReadFile"]
        [::std::mem::offset_of!(TTXFileHooks, PReadFile) - 8usize];
    ["Offset of field: TTXFileHooks::PWriteFile"]
        [::std::mem::offset_of!(TTXFileHooks, PWriteFile) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TTXSetupHooks {
    pub ReadIniFile: *mut PReadIniFile,
    pub WriteIniFile: *mut PWriteIniFile,
    pub ReadKeyboardCnf: *mut PReadKeyboardCnf,
    pub CopyHostList: *mut PCopyHostList,
    pub AddHostToList: *mut PAddHostToList,
    pub ParseParam: *mut PParseParam,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TTXSetupHooks"][::std::mem::size_of::<TTXSetupHooks>() - 24usize];
    ["Alignment of TTXSetupHooks"][::std::mem::align_of::<TTXSetupHooks>() - 4usize];
    ["Offset of field: TTXSetupHooks::ReadIniFile"]
        [::std::mem::offset_of!(TTXSetupHooks, ReadIniFile) - 0usize];
    ["Offset of field: TTXSetupHooks::WriteIniFile"]
        [::std::mem::offset_of!(TTXSetupHooks, WriteIniFile) - 4usize];
    ["Offset of field: TTXSetupHooks::ReadKeyboardCnf"]
        [::std::mem::offset_of!(TTXSetupHooks, ReadKeyboardCnf) - 8usize];
    ["Offset of field: TTXSetupHooks::CopyHostList"]
        [::std::mem::offset_of!(TTXSetupHooks, CopyHostList) - 12usize];
    ["Offset of field: TTXSetupHooks::AddHostToList"]
        [::std::mem::offset_of!(TTXSetupHooks, AddHostToList) - 16usize];
    ["Offset of field: TTXSetupHooks::ParseParam"]
        [::std::mem::offset_of!(TTXSetupHooks, ParseParam) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TTXUIHooks {
    pub SetupTerminal: *mut PSetupTerminal,
    pub SetupWin: *mut PSetupWin,
    pub SetupKeyboard: *mut PSetupKeyboard,
    pub SetupSerialPort: *mut PSetupSerialPort,
    pub SetupTCPIP: *mut PSetupTCPIP,
    pub GetHostName: *mut PGetHostName,
    pub ChangeDirectory: *mut PChangeDirectory,
    pub AboutDialog: *mut PAboutDialog,
    pub ChooseFontDlg: *mut PChooseFontDlg,
    pub SetupGeneral: *mut PSetupGeneral,
    pub WindowWindow: *mut PWindowWindow,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TTXUIHooks"][::std::mem::size_of::<TTXUIHooks>() - 44usize];
    ["Alignment of TTXUIHooks"][::std::mem::align_of::<TTXUIHooks>() - 4usize];
    ["Offset of field: TTXUIHooks::SetupTerminal"]
        [::std::mem::offset_of!(TTXUIHooks, SetupTerminal) - 0usize];
    ["Offset of field: TTXUIHooks::SetupWin"]
        [::std::mem::offset_of!(TTXUIHooks, SetupWin) - 4usize];
    ["Offset of field: TTXUIHooks::SetupKeyboard"]
        [::std::mem::offset_of!(TTXUIHooks, SetupKeyboard) - 8usize];
    ["Offset of field: TTXUIHooks::SetupSerialPort"]
        [::std::mem::offset_of!(TTXUIHooks, SetupSerialPort) - 12usize];
    ["Offset of field: TTXUIHooks::SetupTCPIP"]
        [::std::mem::offset_of!(TTXUIHooks, SetupTCPIP) - 16usize];
    ["Offset of field: TTXUIHooks::GetHostName"]
        [::std::mem::offset_of!(TTXUIHooks, GetHostName) - 20usize];
    ["Offset of field: TTXUIHooks::ChangeDirectory"]
        [::std::mem::offset_of!(TTXUIHooks, ChangeDirectory) - 24usize];
    ["Offset of field: TTXUIHooks::AboutDialog"]
        [::std::mem::offset_of!(TTXUIHooks, AboutDialog) - 28usize];
    ["Offset of field: TTXUIHooks::ChooseFontDlg"]
        [::std::mem::offset_of!(TTXUIHooks, ChooseFontDlg) - 32usize];
    ["Offset of field: TTXUIHooks::SetupGeneral"]
        [::std::mem::offset_of!(TTXUIHooks, SetupGeneral) - 36usize];
    ["Offset of field: TTXUIHooks::WindowWindow"]
        [::std::mem::offset_of!(TTXUIHooks, WindowWindow) - 40usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TTXExports {
    pub size: ::std::os::raw::c_int,
    pub loadOrder: ::std::os::raw::c_int,
    pub TTXInit: ::std::option::Option<unsafe extern "stdcall" fn(ts: PTTSet, cv: PComVar)>,
    pub TTXGetUIHooks: ::std::option::Option<unsafe extern "stdcall" fn(UIHooks: *mut TTXUIHooks)>,
    pub TTXGetSetupHooks:
        ::std::option::Option<unsafe extern "stdcall" fn(setupHooks: *mut TTXSetupHooks)>,
    pub TTXOpenTCP: ::std::option::Option<unsafe extern "stdcall" fn(hooks: *mut TTXSockHooks)>,
    pub TTXCloseTCP: ::std::option::Option<unsafe extern "stdcall" fn(hooks: *mut TTXSockHooks)>,
    pub TTXSetWinSize: ::std::option::Option<
        unsafe extern "stdcall" fn(rows: ::std::os::raw::c_int, cols: ::std::os::raw::c_int),
    >,
    pub TTXModifyMenu: ::std::option::Option<unsafe extern "stdcall" fn(menu: HMENU)>,
    pub TTXModifyPopupMenu: ::std::option::Option<unsafe extern "stdcall" fn(menu: HMENU)>,
    pub TTXProcessCommand: ::std::option::Option<
        unsafe extern "stdcall" fn(hWin: HWND, cmd: WORD) -> ::std::os::raw::c_int,
    >,
    pub TTXEnd: ::std::option::Option<unsafe extern "stdcall" fn()>,
    pub TTXSetCommandLine: ::std::option::Option<
        unsafe extern "stdcall" fn(
            cmd: *mut wchar_t,
            cmdlen: ::std::os::raw::c_int,
            rec: PGetHNRec,
        ),
    >,
    pub TTXOpenFile: ::std::option::Option<unsafe extern "stdcall" fn(hooks: *mut TTXFileHooks)>,
    pub TTXCloseFile: ::std::option::Option<unsafe extern "stdcall" fn(hooks: *mut TTXFileHooks)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TTXExports"][::std::mem::size_of::<TTXExports>() - 60usize];
    ["Alignment of TTXExports"][::std::mem::align_of::<TTXExports>() - 4usize];
    ["Offset of field: TTXExports::size"][::std::mem::offset_of!(TTXExports, size) - 0usize];
    ["Offset of field: TTXExports::loadOrder"]
        [::std::mem::offset_of!(TTXExports, loadOrder) - 4usize];
    ["Offset of field: TTXExports::TTXInit"][::std::mem::offset_of!(TTXExports, TTXInit) - 8usize];
    ["Offset of field: TTXExports::TTXGetUIHooks"]
        [::std::mem::offset_of!(TTXExports, TTXGetUIHooks) - 12usize];
    ["Offset of field: TTXExports::TTXGetSetupHooks"]
        [::std::mem::offset_of!(TTXExports, TTXGetSetupHooks) - 16usize];
    ["Offset of field: TTXExports::TTXOpenTCP"]
        [::std::mem::offset_of!(TTXExports, TTXOpenTCP) - 20usize];
    ["Offset of field: TTXExports::TTXCloseTCP"]
        [::std::mem::offset_of!(TTXExports, TTXCloseTCP) - 24usize];
    ["Offset of field: TTXExports::TTXSetWinSize"]
        [::std::mem::offset_of!(TTXExports, TTXSetWinSize) - 28usize];
    ["Offset of field: TTXExports::TTXModifyMenu"]
        [::std::mem::offset_of!(TTXExports, TTXModifyMenu) - 32usize];
    ["Offset of field: TTXExports::TTXModifyPopupMenu"]
        [::std::mem::offset_of!(TTXExports, TTXModifyPopupMenu) - 36usize];
    ["Offset of field: TTXExports::TTXProcessCommand"]
        [::std::mem::offset_of!(TTXExports, TTXProcessCommand) - 40usize];
    ["Offset of field: TTXExports::TTXEnd"][::std::mem::offset_of!(TTXExports, TTXEnd) - 44usize];
    ["Offset of field: TTXExports::TTXSetCommandLine"]
        [::std::mem::offset_of!(TTXExports, TTXSetCommandLine) - 48usize];
    ["Offset of field: TTXExports::TTXOpenFile"]
        [::std::mem::offset_of!(TTXExports, TTXOpenFile) - 52usize];
    ["Offset of field: TTXExports::TTXCloseFile"]
        [::std::mem::offset_of!(TTXExports, TTXCloseFile) - 56usize];
};
pub type TTXBindProc = ::std::option::Option<
    unsafe extern "stdcall" fn(Version: WORD, exports: *mut TTXExports) -> BOOL,
>;
